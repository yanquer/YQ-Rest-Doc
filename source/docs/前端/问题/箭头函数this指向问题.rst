===============================
不同位置调用时的this指向问题
===============================


.. post:: 2023-02-26 21:30:12
  :tags: 问题
  :category: 前端
  :author: YanQue
  :location: CD
  :language: zh-cn


举例, 比如React父组件将自己的方法传给子组件,
然后子组件再调用此方法.

这个时候可以进入这个传递的方法的内部,
但是, 如果方法内有使用到 `this`, 那么这个时候的 `this` 是当前的指针
而不是父组件实例的指针,

方法一: bind
===============================

这个时候可以用 `bind` 来解决这个问题, 若原来传给子组件的是::

  this.close

改成::

  this.close.bind(this)

即可.

这里的 `this` 相当于Python的self

.. note::

  - 仅可用于传递的是回调, 而非值
  - 若回调内不含this调用可以不bind

方法二: 箭头函数
===============================

用例::

  () => {this.close()}

在 TypeScript 的箭头函数中,this 的指向是继承外层作用域的this,而不是指向箭头函数本身。

主要原因有两个:

1. 箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。
2. TypeScript 的箭头函数会按照 ES6 的规范实现,其中明确规定了箭头函数内的this与外层this绑定。

举例来说::

  const obj = {
    foo: () => {
      //这里的this指向obj
      console.log(this)
    }
  }

  obj.foo() // obj

在上例中,箭头函数foo()继承了obj的this, 所以在函数内部打印的this是obj对象,而不是箭头函数本身

总结
===============================

bind和箭头函数都可以将this指针绑定为定义时的环境,
而非调用时的环境.

