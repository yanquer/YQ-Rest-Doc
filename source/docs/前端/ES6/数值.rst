============================
数值
============================

常见数值表示
============================

二进制表示法新写法: 前缀 0b 或 0B ::

  console.log(0b11 === 3); // true
  console.log(0B11 === 3); // true

八进制表示法新写法: 前缀 0o 或 0O ::

  console.log(0o11 === 9); // true
  console.log(0O11 === 9); // true

常量
============================

Number.EPSILON
  Number.EPSILON 属性表示 1 与大于 1 的最小浮点数之间的差.
  它的值接近于 2.2204460492503130808472633361816E-16，或者 2-52.

测试数值是否在误差范围内::

  0.1 + 0.2 === 0.3; // false
  // 在误差范围内即视为相等
  equal = (Math.abs(0.1 - 0.3 + 0.2) < Number.EPSILON); // true

属性特性:

- writable：false
- enumerable：false
- configurable：false

最大/最小安全整数
============================

安全整数
  安全整数表示在 JavaScript 中能够精确表示的整数，
  安全整数的范围在 2 的 -53 次方到 2 的 53 次方之间（不包括两个端点），
  超过这个范围的整数无法精确表示。
最大安全整数
  安全整数范围的上限，即 2 的 53 次方减 1 .
  如::

    Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2; // true
    Number.MAX_SAFE_INTEGER === Number.MAX_SAFE_INTEGER + 1;     // false
    Number.MAX_SAFE_INTEGER - 1 === Number.MAX_SAFE_INTEGER - 2; // false
最小安全整数
  安全整数范围的下限，即 2 的 53 次方减 1 的负数.
  如::

    Number.MIN_SAFE_INTEGER + 1 === Number.MIN_SAFE_INTEGER + 2; // false
    Number.MIN_SAFE_INTEGER === Number.MIN_SAFE_INTEGER - 1;     // false
    Number.MIN_SAFE_INTEGER - 1 === Number.MIN_SAFE_INTEGER - 2; // true

属性特性::

  writable：false
  enumerable：false
  configurable：false

方法
============================

Number 对象新方法

.. function:: Number.isFinite()

  用于检查一个数值是否为有限的（ finite ），即不是 Infinity

.. function:: Number.parseInt()

  用于将给定字符串转化为指定进制的整数,
  如::

    // 不指定进制时默认为 10 进制
    Number.parseInt('12.34'); // 12
    Number.parseInt(12.34);   // 12

    // 指定进制
    Number.parseInt('0011',2); // 3

Math 对象的扩展
============================

ES6 在 Math 对象上新增了 17 个数学相关的静态方法，这些方法只能在 Math 中调用。

普通计算
----------------------------

.. function:: Math.cbrt

  用于计算一个数的立方根。

.. function:: Math.imul

  两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数

.. function:: Math.hypot

  用于计算所有参数的平方和的平方根

.. function:: Math.clz32

  用于返回数字的32 位无符号整数形式的前导0的个数

数字处理
----------------------------

.. function:: Math.trunc

  用于返回数字的整数部分

.. function:: Math.fround

  用于获取数字的32位单精度浮点数形式

判断
----------------------------

.. function:: Math.sign

  判断数字的符号（正、负、0）

对数方法
----------------------------

.. function:: Math.expm1()

  用于计算 e 的 x 次方减 1 的结果，即 Math.exp(x) - 1

.. function:: Math.log1p(x)

  用于计算1 + x 的自然对数，即 Math.log(1 + x)

.. function:: Math.log10(x)

  用于计算以 10 为底的 x 的对数

.. function:: Math.log2()

  用于计算 2 为底的 x 的对数

双曲函数方法
----------------------------

- Math.sinh(x): 用于计算双曲正弦
- Math.cosh(x): 用于计算双曲余弦
- Math.tanh(x): 用于计算双曲正切
- Math.asinh(x): 用于计算反双曲正弦
- Math.acosh(x): 用于计算反双曲余弦
- Math.atanh(x): 用于计算反双曲正切

指数运算符
----------------------------

指数运算符::

  1 ** 2; // 1
  // 右结合，从右至左计算
  2 ** 2 ** 3; // 256
  // **=
  let exam = 2;
  exam ** = 2; // 4




