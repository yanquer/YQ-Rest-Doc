========================
变量声明/赋值
========================

普通赋值
========================

- let 声明的变量只在 let 命令所在的代码块内有效, 只能声明一次
- var 在全局范围内有效, 可多次声明
- const 声明一个只读的常量，一旦声明，常量的值就不能改变, 一旦声明必须初始化.
  const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动.

  对于简单类型（数值 number、字符串 string 、布尔值 boolean）,值就保存在变量指向的那个内存地址，
  因此 const 声明的简单类型变量等同于常量.

  而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针,
  所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用 const 声明复杂类型对象时要慎重。

解构赋值
========================

解构赋值是对赋值运算符的扩展。
他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值

有两部分组成:

- 解构的源，解构赋值表达式的右边部分;
- 解构的目标，解构赋值表达式的左边部分.

如::

  let [a, , b] = [1, 2, 3];
  // a = 1
  // b = 3

  let [a, ...b] = [1, 2, 3];
  //a = 1
  //b = [2, 3]

在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。可遍历对象即实现 Iterator 接口的数据::

  let [a, b, c, d, e] = 'hello';
  // a = 'h'
  // b = 'e'
  // c = 'l'
  // d = 'l'
  // e = 'o'

带默认值的情况::

  let [a = 3, b = a] = [];     // a = 3, b = 3
  let [a = 3, b = a] = [1];    // a = 1, b = 1
  let [a = 3, b = a] = [1, 2]; // a = 1, b = 2

