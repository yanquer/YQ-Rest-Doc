=========================
数据类型VARCHAR和CHAR
=========================

固定长度 & 可变长度
=======================

VARCHAR
	VARCHAR类型用于存储 `可变长度` 字符串，是最常见的字符串数据类型。
	它比固定长度类型更节省空间，因为它仅使用必要的空间(根据实际字符串的长度改变存储空间)。

	有一种情况例外，如果MySQL表使用ROW_FORMAT=FIXED创建的话，每一行都会使用定长存储。
CHAR
	CHAR类型用于存储固定长度字符串: MySQL总是根据定义的字符串长度分配足够的空间。
	当存储CHAR值时，MySQL会删除字符串中的末尾空格
	(在MySQL 4.1和更老版本中VARCHAR 也是这样实现的 ——
	也就是说这些版本中CHAR和VARCHAR在逻辑上是一样的，区别只是在存储格式上)。

	同时，CHAR值会根据需要采用空格进行剩余空间填充，以方便比较和检索。
	但正因为其长度固定，所以会占据多余的空间，也是一种空间换时间的策略；

存储方式
=======================

VARCHAR
	VARCHAR需要使用1或2个额外字节记录字符串的长度:
	如果列的最大长度小于或等于255字节，则只使用1个字节表示，否则使用2个字节。
	假设采用latinl字符集，一个VARCHAR(10)的列需要11个字节的存储空间。
	VARCHAR(1000)的列则需要1002 个字节，因为需要2个字节存储长度信息。

	VARCHAR节省了存储空间，所以对性能也有帮助。
	但是，由于行是变长的，在UPDATE时可能使行变得比原来更长，这就导致需要做额外的工作。
	如果一个行占用的空间增长，并且在页内没有更多的空间可以存储，
	在这种情况下，不同的存储引擎的处理方式是不一样的。
	例如，MylSAM会将行拆成不同的片段存储，InnoDB则需要分裂页来使行可以放进页内。
CHAR
	CHAR适合存储很短或长度近似的字符串。
	例如，CHAR非常适合存储密码的MD5值，因为这是一个定长的值。
	对于经常变更的数据，CHAR也比VARCHAR更好，因为定长的CHAR类型不容易产生碎片。

	对于非常短的列，CHAR比VARCHAR在存储空间上也更有效率。
	例如用CHAR(1)来存储只有Y和N的值，如果采用单字节字符集只需要一个字节，
	但是VARCHAR(1)却需要两个字节，因为还有一个记录长度的额外字节。

存储容量
=======================

CHAR
	对于char类型来说，最多只能存放的字符个数为255，和编码无关，任何编码最大容量都是255。
VARCHAR
	MySQL行默认最大65535字节，是所有列共享（相加）的，所以VARCHAR的最大值受此限制。

	表中只有单列字段情况下，varchar一般最多能存放(65535 - 3)个字节，
	varchar的最大有效长度通过最大行数据长度和使用的字符集来确定，
	通常的最大长度是65532个字符（当字符串中的字符都只占1个字节时，能达到65532个字符）；

计算为什么是65532个字符？
	算法如下（有余数时向下取整）::

		最大长度(字符数) = （行存储最大字节数 - NULL标识列占用字节数 - 长度标识字节数） / 字符集单字符最大字节数

	- NULL标识列占用字节数：允许NULL时，占一字节
	- 长度标识字节数：记录长度的标识，长度小于等于255（28）时，占1字节；小于65535时（216）,占2字节

	VARCHAR类型在4.1和5.0版本发生了很大的变化，使得情况更加复杂。
	从MySQL 4.1开始，每个字符串列可以定义自己的字符集和排序规则。这些东西会很大程度上影响性能。

	- 4.0版本及以下，MySQL中varchar长度是按字节展示，如varchar(20)，指的是20字节；
	- 5.0版本及以上，MySQL中varchar长度是按字符展示。如varchar(20)，指的是20字符。

	当然，行总长度还是65535字节，而字符和字节的换算，则与编码方式有关，不同的字符所占的字节是不同的。编码划分如下：

	GBK编码
		一个英文字符占一个字节，中文2字节，单字符最大可占用2个字节。
	UTF-8编码
		一个英文字符占一个字节，中文3字节，单字符最大可占用3个字节。
	utf8mb4编码
		一个英文字符占一个字节，中文3字节，单字符最大占4个字节（如emoji表情4字节）。

	假设当前还有6字节可以存放字符，按单字符占用最大字节数来算，可以存放3个GBK、或2个utf8、或1个utf8mb4。

思考：既然VARCHAR长度可变，那我要不要定到最大?
	没错，相信你已经有答案了，别这么干！

	就像使用VARCHAR(5)和VARCHAR(200)存储 '陈哈哈’的磁盘空间开销是一样的。
	那么使用更短的列有什么优势呢？

	事实证明有很大的优势。
	更长的列会消耗更多的内存，因为MySQL通常会分配固定大小的内存块来保存内部值。

	当然，在没拿到存储引擎存储的数据之前，
	并不会知道我这一行拿出来的数据到底有多长，可能长度只有1，可能长度是500，那怎么办呢？
	那就只能先把最大空间分配好了，避免放不下的问题发生，这样实际上对于真实数据较短的varchar确实会造成空间的浪费。

	举例：我向数据类型为：varchar（1000）的列插入了1024行数据，
	但是每个只存一个字符，那么这1024行真实数据量其实只有1K，
	但是我却需要约1M的内存去适应他。所以最好的策略是只分配真正需要的空间。

.. note::

	与 CHAR 和 VARCHAR 类似的类型还有 BINARY 和 VARBINARY, 它们存储的是二进制字符串.
	二进制字符串跟常规字符串非常相似，但是二进制字符串存储的是字节码而不是字符。
	填充也不一样: MySQL填充BINARY采用的是 ``\0`` (零字节)而不是空格，在检索时也不会去掉填充值。

	当需要存储二进制数据，并且希望MySQL使用字节码而不是字符进行比较时，这些类型是非常有用的。
	二进制比较的优势并不仅仅体现在大小写敏感上。
	MySQL比较BINARY字符串时，每次按一个字节，并且根据该字节的数值进行比较。
	因此，二进制比 较比字符比较简单很多，所以也就更快。

