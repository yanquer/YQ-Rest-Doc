==============================
触发器
==============================

MySQL数据库中触发器是一个特殊的存储过程，
不同的是执行存储过程要使用 CALL 语句来调用，
而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，
只要一个预定义的事件发生就会被 MySQL自动调用。

引发触发器执行的事件一般如下：

- 增加一条学生记录时，会自动检查年龄是否符合范围要求。
- 每当删除一条学生信息时，自动删除其成绩表上的对应记录。
- 每当删除一条数据时，在数据库存档表中保留一个备份副本。

触发程序的优点如下：

- 触发程序的执行是自动的，当对触发程序相关表的数据做出相应的修改后立即执行。
- 触发程序可以通过数据库中相关的表层叠修改另外的表。
- 触发程序可以实施比 FOREIGN KEY 约束、CHECK 约束更为复杂的检查和操作。

触发器与表关系密切，主要用于保护表中的数据。
特别是当有多个表具有一定的相互联系的时候，触发器能够让不同的表保持数据的一致性。

**在 MySQL 中，只有执行 INSERT、UPDATE 和 DELETE 操作时才能激活触发器。**

在实际使用中，MySQL 所支持的触发器有三种：

- INSERT 触发器
- UPDATE 触发器
- DELETE 触发器

INSERT 触发器
==============================

在 INSERT 语句执行之前或之后响应的触发器。

使用 INSERT 触发器需要注意以下几点：

- 在 INSERT 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问被插入的行。
- 在 BEFORE INSERT 触发器中，NEW 中的值也可以被更新，即允许更改被插入的值（只要具有对应的操作权限）。
- 对于 AUTO_INCREMENT 列，NEW 在 INSERT 执行之前包含的值是 0，在 INSERT 执行之后将包含新的自动生成值。

UPDATE 触发器
==============================

在 UPDATE 语句执行之前或之后响应的触发器。

使用 UPDATE 触发器需要注意以下几点：

- 在 UPDATE 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问更新的值。
- 在 UPDATE 触发器代码内，可引用一个名为 OLD（不区分大小写）的虚拟表来访问 UPDATE 语句执行前的值。
- 在 BEFORE UPDATE 触发器中，NEW 中的值可能也被更新，即允许更改将要用于 UPDATE 语句中的值（只要具有对应的操作权限）。
- OLD 中的值全部是只读的，不能被更新。

.. note::

  当触发器设计对触发表自身的更新操作时，只能使用 BEFORE 类型的触发器，AFTER 类型的触发器将不被允许。

DELETE 触发器
==============================

在 DELETE 语句执行之前或之后响应的触发器。

使用 DELETE 触发器需要注意以下几点：

- 在 DELETE 触发器代码内，可以引用一个名为 OLD（不区分大小写）的虚拟表来访问被删除的行。
- OLD 中的值全部是只读的，不能被更新。

总体来说，触发器使用的过程中，MySQL 会按照以下方式来处理错误。

- 若对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；
- 对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。
- 若 BEFORE 触发程序失败，则 MySQL 将不执行相应行上的操作。
- 若在 BEFORE 或 AFTER 触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。
- 仅当 BEFORE 触发程序和行操作均已被成功执行，MySQL 才会执行AFTER触发程序。

触发器的执行顺序
==============================

我们建立的数据库一般都是 InnoDB 数据库，其上建立的表是事务性表，也就是事务安全的。
这时，若SQL语句或触发器执行失败，MySQL 会回滚事务，有：

- 如果 BEFORE 触发器执行失败，SQL 无法正确执行
- SQL 执行失败时，AFTER 型触发器不会触发
- AFTER 类型的触发器执行失败，SQL 会回滚

MySQL创建触发器（CREATE TRIGGER）
============================================================

触发器是与 MySQL数据表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。
触发器的这种特性可以协助应用在数据库端确保数据的完整性。

基本语法
------------------------------

在 MySQL 5.7 中，可以使用 CREATE TRIGGER 语句创建触发器。

语法格式如下::

  CREATE <触发器名> < BEFORE | AFTER >
  <INSERT | UPDATE | DELETE >
  ON <表名> FOR EACH Row<触发器主体>

语法说明如下

触发器名
  触发器的名称，触发器在当前数据库中必须具有唯一的名称。
  如果要在某个特定数据库中创建，名称前面应该加上数据库的名称。
INSERT | UPDATE | DELETE
  触发事件，用于指定激活触发器的语句的种类。

  注意：三种触发器的执行时间如下。

  - INSERT：将新行插入表时激活触发器。
    例如，INSERT 的 BEFORE 触发器不仅能被 MySQL 的 INSERT 语句激活，也能被 LOAD DATA 语句激活。
  - DELETE： 从表中删除某一行数据时激活触发器，例如 DELETE 和 REPLACE 语句。
  - UPDATE：更改表中某一行数据时激活触发器，例如 UPDATE 语句。
BEFORE | AFTER
  BEFORE 和 AFTER，触发器被触发的时刻，表示触发器是在激活它的语句之前或之后触发。
  若希望验证新数据是否满足条件，则使用 BEFORE 选项；
  若希望在激活触发器的语句执行之后完成几个或更多的改变，则通常使用 AFTER 选项。
表名
  与触发器相关联的表名，此表必须是永久性表，不能将触发器与临时表或视图关联起来。
  在该表上触发事件发生时才会激活触发器。
  同一个表不能拥有两个具有相同触发时刻和事件的触发器。
  例如，对于一张数据表，不能同时有两个 BEFORE UPDATE 触发器，
  但可以有一个 BEFORE UPDATE 触发器和一个 BEFORE INSERT 触发器，
  或一个 BEFORE UPDATE 触发器和一个 AFTER UPDATE 触发器。
触发器主体
  触发器动作主体，包含触发器激活时将要执行的 MySQL 语句。
  如果要执行多个语句，可使用 BEGIN…END 复合语句结构。
FOR EACH ROW
  一般是指行级触发，对于受触发事件影响的每一行都要激活触发器的动作。
  例如，使用 INSERT 语句向某个表中插入多行数据时，触发器会对每一行数据的插入都执行相应的触发器动作。

  .. note::

    每个表都支持 INSERT、UPDATE 和 DELETE 的 BEFORE 与 AFTER，因此每个表最多支持 6 个触发器。
    每个表的每个事件每次只允许有一个触发器。单一触发器不能与多个事件或多个表关联。

  另外，在 MySQL 中，若需要 **查看数据库中已有的触发器，则可以使用 SHOW TRIGGERS 语句。**

.. note::

  如果触发器的逻辑块只包含一个语句，您可以省略 BEGIN 和 END 关键字。

创建 BEFORE 类型触发器
------------------------------

以, t1表为例::

  mysql> show create table t1 \G;
  *************************** 1. row ***************************
        Table: t1
  Create Table: CREATE TABLE `t1` (
    `id` int NOT NULL,
    `name` varchar(255) DEFAULT NULL,
    `age` int DEFAULT NULL,
    `birth` datetime DEFAULT NULL,
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
  1 row in set (0.00 sec)

  ERROR:
  No query specified

关于此表创建可见 :ref:`TableCreate` ,
后续用例都以此表操作.

查看表信息::

  mysql> desc t1;
  +-------+--------------+------+-----+---------+-------+
  | Field | Type         | Null | Key | Default | Extra |
  +-------+--------------+------+-----+---------+-------+
  | id    | int          | NO   | PRI | NULL    |       |
  | name  | varchar(255) | YES  |     | NULL    |       |
  | age   | int          | YES  |     | NULL    |       |
  | birth | datetime     | YES  |     | NULL    |       |
  +-------+--------------+------+-----+---------+-------+
  4 rows in set (0.00 sec)

创建一个触发器, 在插入表之前, 统计计算下人数, 总年龄, 平均年龄::

  mysql> delimiter $$
  mysql> create trigger AvgAge
      ->   before insert
      ->   on t1
      -> for each row
      -> begin
      ->   set @nums = @nums + 1;
      ->   set @sumAge = @sumAge + new.age;
      ->   set @sumAvgAge = @sumAge / @nums;
      -> end $$
  Query OK, 0 rows affected (0.02 sec)

  mysql> delimiter ;
  mysql>

使用, 需要先定义一下变量::

  mysql> set @nums=0, @sumAge=0, @sumAvgAge=0;
  Query OK, 0 rows affected (0.00 sec)

  mysql> insert into t1
      -> values
      ->   (1, "bob", 26, "1999-2-2"),
      ->   (2, "tom", 28, "1998-4-4");
  Query OK, 2 rows affected (0.01 sec)
  Records: 2  Duplicates: 0  Warnings: 0

  mysql> select @nums, @sumAge, @sumAvgAge;
  +-------+---------+--------------+
  | @nums | @sumAge | @sumAvgAge   |
  +-------+---------+--------------+
  |     2 |      54 | 27.000000000 |
  +-------+---------+--------------+
  1 row in set (0.00 sec)

创建 AFTER 类型触发器
------------------------------

MySQL修改和删除触发器（DROP TRIGGER）
============================================================

修改触发器可以通过删除原触发器，再以相同的名称创建新的触发器。

基本语法

与其他MySQL数据库对象一样，可以使用 DROP 语句将触发器从数据库中删除。

语法格式如下::

  DROP TRIGGER [ IF EXISTS ] [数据库名] <触发器名>

语法说明如下：

触发器名
  要删除的触发器名称。
数据库名
  可选项。指定触发器所在的数据库的名称。若没有指定，则为当前默认的数据库
权限
  执行 DROP TRIGGER 语句需要 SUPER 权限。
IF EXISTS
  可选项。避免在没有触发器的情况下删除触发器。

.. note::

  删除一个表的同时，也会自动删除该表上的触发器。
  另外，触发器不能更新或覆盖，为了修改一个触发器，必须先删除它，再重新创建。

删除触发器
  使用 DROP TRIGGER 语句可以删除 MySQL 中已经定义的触发器。

参考: `MySQL 之触发器（创建/修改、删除CREATE/DROP TRIGGER) <https://www.cnblogs.com/ccstu/p/12187719.html>`_







