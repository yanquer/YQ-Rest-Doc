==========================
存储过程
==========================


.. post:: 2023-02-20 22:06:49
  :tags: mysql, 概念基础
  :category: 数据库
  :author: YanQue
  :location: CD
  :language: zh-cn


MySQL5.0 版本开始支持存储过程。

如果在实现用户的某些需求时，需要编写一组复杂的SQL语句才能实现，
那么我们就可以将这组复杂的SQL语句集提前编写在数据库中，
由JDBC调用来执行这组SQL语句。
把编写在数据库中的SQL语句集称为存储过程。

存储过程（PROCEDURE）
  事先经过编译并存储在数据库中的一段SQL语句的集合。
  调用存储过程可以简化应用开发人员的很多工作，
  减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是很有好处的

简单理解就是数据库 SQL 语言层面的代码封装与重用。
类似于Java中的方法，需要先定义，使用时需要调用。
存储过程可以定义参数，参数分为IN、OUT、INOUT类型三种类型

- IN类型的参数表示接受调用者传入的数据；
- OUT类型的参数表示向调用者返回数据；
- INOUT类型的参数即可以接受调用者传入的参数，也可以向调用者返回数据。

优点
  - 存储过程可封装，并隐藏复杂的商业逻辑。
  - 存储过程可以回传值，并可以接受参数。
  - 存储过程无法使用 SELECT 指令来运行，因为它是子程序，与查看表，数据表或用户定义函数不同。
  - 存储过程可以用在数据检验，强制实行商业逻辑等。
缺点
  - 存储过程，往往定制化于特定的数据库上，因为支持的编程语言不同。
    当切换到其他厂商的数据库系统时，需要重写原有的存储过程。
  - 存储过程的性能调校与撰写，受限于各种数据库系统。

编写
==========================

基本语句格式::

  DELIMITER $$

  CREATE
      /*[DEFINER = { user | CURRENT_USER }]*/
      PROCEDURE 数据库名.存储过程名([in变量名 类型,out 参数 2，...])
      /*LANGUAGE SQL
      | [NOT] DETERMINISTIC
      | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
      | SQL SECURITY { DEFINER | INVOKER }
      | COMMENT 'string'*/
    BEGIN
      [DECLARE 变量名 类型 [DEFAULT 值];]
      存储过程的语句块;
    END$$

  DELIMITER ;

- 存储过程中的语句必须包含在BEGIN和END之间
- DECLARE中用来声明变量，变量默认赋值使用的DEFAULT，语句块中改变变量值，使用SET 变量=值；

存储位置
==========================

存储过程的信息都存储在 **information_schema** 数据库下的 **Routines** 表中，
可以通过查询该表的记录来查询存储过程的信息，SQL 语句如下::

  SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME=存储过程名;

参考: `MySQL查看存储过程 <https://www.cnblogs.com/cy0628/p/15025862.html>`_

调用
==========================

语法::

  CALL 数据库名.存储过程名(参数列表);

示例::

  DELIMITER $$

  CREATE
      PROCEDURE `demo`.`demo2`(IN s_sex CHAR(1),OUT s_count INT)
    -- 存储过程体
    BEGIN
      -- 把SQL中查询的结果通过INTO赋给变量
      SELECT COUNT(*) INTO s_count FROM student WHERE sex= s_sex;
      SELECT s_count;

    END$$
  DELIMITER ;

调用这个存储过程::

  -- @s_count表示测试出输出的参数
  CALL demo2 ('男',@s_count);

存储过程管理
==========================

显示::

  SHOW PROCEDURE STATUS

显示特定数据库的存储过程::

  SHOW PROCEDURE STATUS WHERE db = 'db名字' AND NAME = 'name名字';

显示特定模式的存储过程::

  SHOW PROCEDURE STATUS WHERE NAME LIKE '%mo%';

显示存储过程的源码::

  SHOW CREATE PROCEDURE 存储过程名;

删除存储过程::

  DROP PROCEDURE 存储过程名;

流程控制语句 IF ELSE
==========================

IF 语句包含多个条件判断，根据结果为 TRUE、FALSE执行语句，
与编程语言中的 if、else if、else 语法类似::

  DELIMITER $$
  CREATE
      PROCEDURE `demo`.`demo3`(IN `day` INT)
    -- 存储过程体
    BEGIN
      IF `day` = 0 THEN
      SELECT '星期天';
      ELSEIF `day` = 1 THEN
      SELECT '星期一';
      ELSEIF `day` = 2 THEN
      SELECT '星期二';
      ELSE
      SELECT '无效日期';
      END IF;

    END$$
  DELIMITER ;

条件控制语句 CASE
==========================

类似于Java的 ``switch() case``,
不过Mysql中, 是 ``case xx when``

类似IF的调用::

  DELIMITER $$
  CREATE
      PROCEDURE demo4(IN num INT)
    BEGIN
      CASE -- 条件开始

      WHEN num<0 THEN
        SELECT '负数';
      WHEN num>0 THEN
        SELECT '正数';
      ELSE
      SELECT '不是正数也不是负数';

      END CASE; -- 条件结束
    END$$
  DELIMITER;

类似Java的switch调用::

  DELIMITER $$
  CREATE
      PROCEDURE demo5(IN num INT)
    BEGIN
      CASE num  -- 条件开始
      WHEN 1 THEN
        SELECT '输入为1';
      WHEN 0 THEN
        SELECT '输入为0';
      ELSE
      SELECT '不是1也不是0';
      END CASE; -- 条件结束
    END$$
  DELIMITER;

循环语句 WHILE
==========================

类似于其他语言的while::

  DELIMITER $$
  CREATE
      PROCEDURE demo6(IN num INT,OUT SUM INT)
    BEGIN
        SET SUM = 0;
        WHILE num<10 DO -- 循环开始
            SET num = num+1;
            SET SUM = SUM+num;
            END WHILE; -- 循环结束
    END$$
  DELIMITER;

调用::

  -- 调用函数
  CALL demo6(0,@sum);

  -- 查询函数
  SELECT @sum;

循环语句 REPEAT UNTLL
==========================

REPEATE…UNTLL 语句的用法和 Java中的 do…while 语句类似，
都是先执行循环操作，再判断条件，
区别是REPEATE 表达式值为 false时才执行循环操作，直到表达式值为 true停止::

  -- 创建过程
  DELIMITER $$
  CREATE
      PROCEDURE demo7(IN num INT,OUT SUM INT)
    BEGIN
        SET SUM = 0;
        REPEAT-- 循环开始
      SET num = num+1;
      SET SUM = SUM+num ;
      UNTIL num>=10
      END REPEAT; -- 循环结束
    END$$
  DELIMITER;

调用::

  CALL demo7(9,@sum);

  SELECT @sum;

循环语句 LOOP
==========================

循环语句，用来重复执行某些语句。

执行过程中可使用 LEAVE语句或者ITEREATE来跳出循环，也可以嵌套IF等判断语句。

- LEAVE 语句效果对于Java中的break，用来终止循环；
- ITERATE语句效果相当于Java中的continue，用来跳过此次循环。进入下一次循环。且ITERATE之下的语句将不在进行。

例如::

  DELIMITER $$
  CREATE
      PROCEDURE demo8(IN num INT,OUT SUM INT)
    BEGIN
        SET SUM = 0;
        demo_sum:LOOP-- 循环开始
      SET num = num+1;
      IF num > 10 THEN
          LEAVE demo_sum; -- 结束此次循环
      ELSEIF num <= 9 THEN
          ITERATE demo_sum; -- 跳过此次循环
      END IF;

      SET SUM = SUM+num;
      END LOOP demo_sum; -- 循环结束
    END$$
  DELIMITER;

使用存储过程插入信息::

  DELIMITER $$
  CREATE
      PROCEDURE demo9(IN s_student VARCHAR(10),IN s_sex CHAR(1),OUT s_result VARCHAR(20))
    BEGIN
      -- 声明一个变量 用来决定这个名字是否已经存在
      DECLARE s_count INT DEFAULT 0;
      -- 验证这么名字是否已经存在
      SELECT COUNT(*) INTO s_count FROM student WHERE `name` = s_student;
      IF s_count = 0 THEN
            INSERT INTO student (`name`, sex) VALUES(s_student, s_sex);
      SET s_result = '数据添加成功';
      ELSE
                  SET s_result = '名字已存在，不能添加';
                  SELECT s_result;
      END IF;
    END$$
  DELIMITER;



参考: `MySQL中的存储过程（详细篇） <https://zhuanlan.zhihu.com/p/679169773>`_

更多详情: `MySQL 存储过程 <https://www.runoob.com/w3cnote/mysql-stored-procedure.html>`_
