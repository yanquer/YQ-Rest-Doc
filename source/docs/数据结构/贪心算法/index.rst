===================================
贪心算法
===================================

贪心策略:
将求解过程分成若干个步骤，
但每个步骤都应用贪心原则，
选取当前状态下最好/最优的选择（局部最有利的选择），
并以此希望最后堆叠出的结果也是最好/最优的解。

.. note::

  由于是选取的局部最优, 所以最终结果不一样是全局最优的

一般步骤
  1. 从某个初始解出发；
  2. 采用迭代的过程，当可以向目标前进一步时，就根据局部最优策略，得到一部分解，缩小问题规模；
  3. 将所有解综合起来

例子: 需要找给顾客41分钱，现在的货币有 25 分、20分、10 分、5 分和 1 分四种硬币；
该怎么办？

按照贪心的三个步骤:
  1. 41分，局部最优化原则，先找给顾客25分；
  2. 此时，41-25=16分，还需要找给顾客10分，然后5分，然后1分；
  3. 最终，找给顾客一个25分，一个10分，一个5分，一个1分，共四枚硬币。

是不是觉得哪里不太对，如果给他2个20分，加一个1分，三枚硬币就可以了呢？^_^;

总结：贪心策略的优缺点

优点
  简单，高效，省去了为了找最优解可能需要穷举操作，通常作为其它算法的辅助策略来使用；
缺点
  不从总体上考虑其它可能情况，每次选取局部最优解，不再进行回溯处理，所以很少情况下得到最优解。

.. note::

  当然, 如果能推导出 局部最优解能够构成全局最优解, 那么贪心策略才算真正的贪心算法
  (这里单纯意义上指能求出正确解的策略才是算法)


与动态规划的区别
  - 贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。
  - 动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。


基于贪心算法的算法

.. toctree::
  :maxdepth: 1

  Dijkstra(迪杰斯特拉)算法


