=============================
回溯算法
=============================


.. post:: 2023-02-20 22:06:49
  :tags:
  :category: 数据结构
  :author: YanQue
  :location: CD
  :language: zh-cn


参考: `回溯法 <https://www.hello-algo.com/chapter_backtracking/backtracking_algorithm/>`_

「回溯算法 backtracking algorithm」是一种通过穷举来解决问题的方法，
它的核心思想是从一个初始状态出发，暴力搜索所有可能的解决方案，
当遇到正确的解则将其记录，直到找到解或者尝试了所有可能的选择都无法找到解为止。

回溯算法通常采用“深度优先搜索”来遍历解空间。
“二叉树”的前序、中序和后序遍历都属于深度优先搜索。

剪枝
=============================

复杂的回溯问题通常包含一个或多个约束条件，约束条件通常可用于“剪枝”。

“剪枝”是一个非常形象的名词。
在搜索过程中，我们“剪掉”了不满足约束条件的搜索分支，避免许多无意义的尝试，从而提高了搜索效率。

实例-全排列问题
=============================

代码::

  def backtrack(
      state: list[int], choices: list[int], selected: list[bool], res: list[list[int]]
  ):
      """回溯算法：全排列 I"""
      # 当状态长度等于元素数量时，记录解
      if len(state) == len(choices):
          res.append(list(state))
          return
      # 遍历所有选择
      for i, choice in enumerate(choices):
          # 剪枝：不允许重复选择元素
          if not selected[i]:
              # 尝试：做出选择，更新状态
              selected[i] = True
              state.append(choice)
              # 进行下一轮选择
              backtrack(state, choices, selected, res)
              # 回退：撤销选择，恢复到之前的状态
              selected[i] = False
              state.pop()

  def permutations_i(nums: list[int]) -> list[list[int]]:
      """全排列 I"""
      res = []
      backtrack(state=[], choices=nums, selected=[False] * len(nums), res=res)
      return res

但是如果有重复元素怎么办呢? 会出现重复的两个树枝,
这个时候简单记录单次的即可::

  def backtrack(
      state: list[int], choices: list[int], selected: list[bool], res: list[list[int]]
  ):
      """回溯算法：全排列 II"""
      # 当状态长度等于元素数量时，记录解
      if len(state) == len(choices):
          res.append(list(state))
          return
      # 遍历所有选择
      duplicated = set[int]()
      for i, choice in enumerate(choices):
          # 剪枝：不允许重复选择元素 且 不允许重复选择相等元素
          if not selected[i] and choice not in duplicated:
              # 尝试：做出选择，更新状态
              duplicated.add(choice)  # 记录选择过的元素值
              selected[i] = True
              state.append(choice)
              # 进行下一轮选择
              backtrack(state, choices, selected, res)
              # 回退：撤销选择，恢复到之前的状态
              selected[i] = False
              state.pop()

注意两个变量剪枝效果, selected 和 duplicated 都用于剪枝，但两者的目标不同。

- 重复选择剪枝：整个搜索过程中只有一个 selected .
  它记录的是当前状态中包含哪些元素，其作用是避免某个元素在 state 中重复出现。
- 相等元素剪枝：每轮选择（每个调用的 backtrack 函数）都包含一个 duplicated.
  它记录的是在本轮遍历（for 循环）中哪些元素已被选择过，其作用是保证单层相等元素只被选择一次



