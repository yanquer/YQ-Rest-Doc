==============================
Object-C
==============================


.. post:: 2023-02-20 22:06:49
  :tags: object-c
  :category: 后端
  :author: YanQue
  :location: CD
  :language: zh-cn


Mac上比较旧的开发语言


一些关键字
==============================

nonatomic
  nonatomic 是一个线程安全相关的属性修饰符。
  它用于指定属性的访问方法（getter 和 setter）在多线程环境下不需要进行加锁操作。
  使用 nonatomic 修饰的属性访问会更快，但在并发访问时可能会出现数据竞争和不一致的问题。

  如果转换为Swift, Swift 中的属性默认是非原子的，因此不需要显式指定 nonatomic。
  如果你需要在多线程环境中访问属性，并确保线程安全，可以使用其他手段来保证，例如使用串行队列或锁。
retain
  retain 是指定属性的内存管理语义的修饰符。
  在引用计数内存管理模型中，它用于增加被引用对象的引用计数，并在不再需要时释放引用计数。
  retain 表示属性是一个 **强引用** ，它会在设置新值时自动增加引用计数，并在不再需要时适时释放引用计数。

  如果转换为Swift, 在 Swift 中，默认使用强引用来管理内存，因此不需要显式指定 retain。
  属性的引用计数会在不再被引用时自动减少，并在合适的时机释放内存。
weak
  weak 是一种属性修饰符，在 Swift 中用于创建 **弱引用（weak reference）**.
  它主要用于解决循环引用（retain cycle）的问题，并帮助管理内存。

  以下是 weak 修饰符的作用和特点：

  - 弱引用：使用 weak 修饰的属性创建的引用是弱引用。
    弱引用不会增加对象的引用计数，当所引用的对象被释放时，弱引用会自动设置为 nil。
    这有助于避免循环引用，从而防止内存泄漏。
  - 解决循环引用：循环引用指的是两个或多个对象之间形成的相互强引用关系，导致它们无法被正确释放。
    这可能会导致内存泄漏，因为对象无法被垃圾回收。
    通过在其中一个对象的属性上使用 weak 修饰符，可以打破循环引用，使其中一个对象成为弱引用。
  - 自动设置为 nil：当所引用的对象被释放时，弱引用会自动设置为 nil。
    这意味着你可以安全地使用弱引用，而不必担心访问已释放的对象。
  - 需要注意的是，只有在引用对象的生命周期可能比引用它的对象短时，才适合使用弱引用。
    如果引用对象的生命周期与引用它的对象相同或更长，那么使用弱引用可能会导致访问已释放对象的错误。



