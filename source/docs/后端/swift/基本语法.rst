===========================
基本语法
===========================

常识了解
===========================

Swift Playground
  可视为一个可交互的文档， 所写即所得

内置关键字
===========================

let
  常量定义
var
  变量定义
print
  打印输出
typealias
  定义类型别名

  如定义了 Int 的类型别名为 Feet::

    typealias Feet = Int
guard
  guard语句和if语句有点类似，都是根据其关键字之后的表达式的布尔值决定下一步执行什么。
  但与if语句不同的是，guard语句只会有一个代码块，不像if语句可以if else多个代码块。

  那么guard语句的作用到底是什么呢？顾名思义，就是守护。
  guard语句判断其后的表达式布尔值为false时，才会执行之后代码块里的代码，
  如果为true，则跳过整个guard语句::

    // 检查身份证，如果身份证没带，则不能进入考场
    guard let id = person["id"] else {
        print("没有身份证，不能进入考场!")
        return
    }

内置数据类型
===========================

Int
  整型
UInt
  无符号整型

  尽量不要使用UInt，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。
  除了这种情况，最好使用Int，即使你要存储的值已知是非负的。
  统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断。

.. note::

  整数类型需要注意以下几点：

  - 在 32 位系统上, Int 和 Int32 长度相同。
  - 在 64 位系统上, Int 和 Int64 长度相同。
  - 在 32 位系统上, UInt 和 UInt32 长度相同。
  - 在 64 位系统上, UInt 和 UInt64 长度相同。
  - Int8, Int16, Int32, Int64 分别表示 8 位, 16 位, 32 位, 和 64 位的有符号整数形式。
  - UInt8, UInt16, UInt32, UInt64 分别表示 8 位, 16 位, 32 位 和 64 位的无符号整数形式。

Float
  32浮点数，精度要求不高的话可以使用此类型。

  浮点类型比整数类型表示的范围更大，可以存储比 Int 类型更大或者更小的数字


Double
  64位浮点数，当你需要存储很大或者很高精度的浮点数时请使用此类型。


.. note::

  Double精确度很高，至少有15位数字，
  而 Float 最少只有6位数字。
  选择哪个类型取决于你的代码需要处理的值的范围。

Bool
  布尔值

  基本的布尔（Boolean）类型，叫做 Bool。布尔值指逻辑上的值，因为它们只能是真或者假。
  Swift 有两个布尔常量，true 和 false。

String
  字符串是字符的序列集合
Character
  字符指的是单个字母
Optional
  使用可选类型来处理值可能缺失的情况。可选类型表示有值或没有值。

  如以下两种声明相等::

    var optionalInteger: Int?
    var optionalInteger: Optional<Int>

  当你声明一个可选变量或者可选属性的时候没有提供初始值，它的值会默认为 nil

  若为布尔， 貌似默认为true

  如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值::

    optionalInteger = 42
    optionalInteger! // 42

  当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值，
  这被称为可选值的 **强制解析（forced unwrapping）**

  这部分(问号/叹号)的使用, 与ts基本一致

  .. note::

    使用!来获取一个不存在的可选值会导致运行时错误。
    使用!来强制解析值之前，一定要确定可选包含一个非nil的值。

  可选绑定
    使用可选绑定（optional binding）来判断可选类型是否包含值，
    如果包含就把值赋给一个临时常量或者变量。

    可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。

    实例::

      import Cocoa

      var myString:String?

      myString = "Hello, Swift!"

      if let yourString = myString {
        print("你的字符串值为 - \(yourString)")
      }else{
        print("你的字符串没有值")
      }

    以上程序执行结果为::

      你的字符串值为 - Hello, Swift!

Array
  todo
Dictionary
  todo
Struct
  todo
Class
  todo



类型安全
===========================

Swift 是一个类型安全（type safe）的语言。

由于 Swift 是类型安全的，
所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。
这可以让你在开发的时候尽早发现并修复错误。

类型推断
===========================

不需要每次声明常量和变量的时候都显式指定类型

如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。

- 当推断浮点数的类型时，Swift 总是会选择Double而不是Float。
- 如果表达式中同时出现了整数和浮点数，会被推断为Double类型

Swift 变量
===========================

变量是一种使用方便的占位符，用于引用计算机内存地址。

声明::

  var variableName = <initial value>

  var varB:Float

- 变量名可以由字母，数字和下划线组成
- 变量名需要以字母或下划线开始
- 区分大小写

Swift 常量
===========================

设定后不可变

声明常量或者变量的时候可以加上类型标注（type annotation），
说明常量或者变量中要存储的值的类型::

  var constantName:<data type> = <optional initial value>

Swift 运算符
===========================

算术运算符
  ``+ - * / %``, 分别表示 加 减 乘 除 求余
比较运算符
  - == 等于
  - !=	不等于
  - >	大于
  - <	小于
  - >=	大于等于
  - <=	小于等于
逻辑运算符
  - &&	逻辑与。如果运算符两侧都为 TRUE 则为 TRUE。
  - ||	逻辑或。 如果运算符两侧至少有一个为 TRUE 则为 TRUE。
  - !	逻辑非。布尔值取反，使得true变false，false变true。
位运算符
  位运算符用来对二进制位进行操作，
  ``~ & | ^ << >>`` 分别为取反，按位与与，按位与或，按位与异或运算, 按位左移， 按位右移
赋值运算符
  - =	简单的赋值运算，指定右边操作数赋值给左边的操作数
  - +=	相加后再赋值，将左右两边的操作数相加后再赋值给左边的操作数。
  - -=	相减后再赋值，将左右两边的操作数相减后再赋值给左边的操作数。
  - \*=	相乘后再赋值，将左右两边的操作数相乘后再赋值给左边的操作数。
  - /=	相除后再赋值，将左右两边的操作数相除后再赋值给左边的操作数
  - %=	求余后再赋值，将左右两边的操作数求余后再赋值给左边的操作数
  - <<=	按位左移后再赋值
  - >>=	按位右移后再赋值
  - &=	按位与运算后赋值
  - ^=	按位异或运算符后再赋值
  - \|=	按位或运算后再赋值
区间运算符
  - 闭区间运算符: 闭区间运算符 ``（a...b）`` 定义一个包含从a到b(包括a和b)的所有值的区间,
    必须大于等于a。 闭区间运算符在迭代一个区间的所有值时是非常有用的，
    如在for-in循环中: ``1...5 区间值为 1, 2, 3, 4 和 5``

  - 半开区间运算符	半开区间（a..<b）定义一个从a到b但不包括b的区间。 之所以称为半开区间，
    是因为该区间包含第一个值而不包括最后的值。 如： ``1..< 5 区间值为 1, 2, 3, 和 4``
其他运算符
  其他类型的的运算符，如一元、二元和三元运算符

  - 一元减:	数字前添加 - 号前缀,	-3 或 -4
  - 一元加:	数字前添加 + 号前缀,	+6 结果为 6
  - 三元运算符:	condition ? X : Y,	如果 condition 为 true ，值为 X ，否则为 Y

.. important:: 运算符优先级

  优先级从上到下依次递减，最上面具有最高的优先级，逗号操作符具有最低的优先级。

  相同优先级中，按结合顺序计算。大多数运算是从左至右计算，只有三个优先级是从右至左结合的，
  它们是单目运算符、条件运算符、赋值运算符。

  基本的优先级需要记住：

  - 指针最优，单目运算优于双目运算。如正负号。
  - 先乘除（模），后加减。
  - 先算术运算，后移位运算，最后位运算。
    特别注意： ``1 << 3 + 2 & 7 等价于 (1 << (3 + 2))&7``
  - 逻辑运算最后计算

合并空值运算符：??
  - 合并空值运算符 a ?? b 如果可选项 a 有值则展开，如果没有值，是 nil，则返回默认值 b。
  - 表达式 a 必须是一个可选类型，表达式 b 必须与 a 的存储类型相同
  - 合并空值运算符，实际上是三元运算符作用到 Optional 上的缩写 a != nil ? a! : b
  - 如果 a 的值是非空，b的值将不会被考虑，也就是合并空值运算符是短路的。

Swift 条件语句
===========================

- if
- switch

最简便的就是三目::

  Exp1 ? Exp2 : Exp3;

Swift 循环
===========================

for-in
  遍历一个集合里面的所有元素，例如由数字表示的区间、数组中的元素、字符串中的字符。
for 循环
  该循环方式在 Swift 3 中已经弃用。

  用来重复执行一系列语句直到达成特定条件达成，
  一般通过在每次循环完成后增加计数器的值来实现。
while 循环
  运行一系列语句，如果条件为true，会重复运行，直到条件变为false。
repeat...while 循环
  类似 while 语句区别在于判断循环条件之前，先执行一次循环的代码块。

循环控制语句
  - continue 语句: 告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。
  - break 语句: 中断当前循环。
  - fallthrough 语句: 如果在一个case执行完后，继续执行下面的case，
    需要使用fallthrough(贯穿)关键字。

Swift 字符串
===========================

创建
  可以通过使用字符串字面量或 String 类的实例来创建一个字符串::

    import Cocoa

    // 使用字符串字面量
    var stringA = "Hello, World!"
    print( stringA )

    // String 实例化
    var stringB = String("Hello, World!")
    print( stringB )

初始化空的字符串
  可以使用空的字符串字面量赋值给变量或初始化一个String类的实例来初始值一个空的字符串,
  使用字符串属性 isEmpty 来判断字符串是否为空::

    import Cocoa

    // 使用字符串字面量创建空字符串
    var stringA = ""
    // 实例化 String 类来创建空字符串
    // let stringB = String()

    if stringA.isEmpty {
      print( "stringA 是空的" )
    } else {
      print( "stringA 不是空的" )

字符串中插入值
  插入的字符串字面量的每一项都在以反斜线为前缀的圆括号中::

    import Cocoa

    var varA   = 20
    let constA = 100
    var varC:Float = 20.0

    var stringA = "\(varA) 乘于 \(constA) 等于 \(varC * 100)"
    print( stringA )

字符串连接
  字符串可以通过 + 号来连接
字符串长度
  字符串长度使用 String.count 属性来计算
字符串比较
  使用 == 来比较两个字符串是否相等
Unicode 字符串
  Unicode 是一个国际标准，用于文本的编码，Swift 的 String 类型是基于 Unicode建立的。
  你可以循环迭代出字符串中 UTF-8 与 UTF-16 的编码::

    import Cocoa

    var unicodeString   = "菜鸟教程"

    print("UTF-8 编码: ")
    for code in unicodeString.utf8 {
      print("\(code) ")
    }

    print("\n")

    print("UTF-16 编码: ")
    for code in unicodeString.utf16 {
      print("\(code) ")
    }

字符串函数及运算符
  - isEmpty: 判断字符串是否为空，返回布尔值
  - hasPrefix(prefix: String): 检查字符串是否拥有特定前缀
  - hasSuffix(suffix: String): 检查字符串是否拥有特定后缀。
  - Int(String): 转换字符串数字为整型
  - String.count: Swift 3 版本使用的是 String.characters.count, 计算字符串的长度
  - utf8: 您可以通过遍历 String 的 utf8 属性来访问它的 UTF-8 编码
  - utf16: 您可以通过遍历 String 的 utf16 属性来访问它的 utf16 编码
  - unicodeScalars: 您可以通过遍历String值的unicodeScalars属性来访问它的 Unicode 标量编码.
  - +: 连接两个字符串，并返回一个新的字符串
  - +=: 连接操作符两边的字符串并将新字符串赋值给左边的操作符变量
  - ==: 判断两个字符串是否相等
  - <: 比较两个字符串，对两个字符串的字母逐一比较。
  - !=: 比较两个字符串是否不相等。

Swift 字符(Character)
===========================

空字符变量
  Swift 中不能创建空的 Character（字符） 类型变量或常量
遍历字符串中的字符
  Swift 3 中的 String 需要通过 characters 去调用的属性方法，
  在 Swift 4 中可以通过 String 对象本身直接调用，例如::

    import Cocoa

    for ch in "Runoob" {
        print(ch)
    }
字符串连接字符
  使用 String 的 append() 方法来实现字符串连接字符

Swift 数组
===========================

如果创建一个数组，并赋值给一个变量，则创建的集合就是可以修改的。这意味着在创建数组后，可以通过添加、删除、修改的方式改变数组里的项目。

如果将一个数组赋值给常量，数组就不可更改，并且数组的大小和内容都不可以修改。

创建数组
  可以使用构造语法来创建一个由特定数据类型构成的空数组：

var someArray = [SomeType]()
  以下是创建一个初始化大小数组的语法::

    var someArray = [SomeType](repeating: InitialValue, count: NumbeOfElements)

  以下实例创建了一个类型为 Int ，数量为 3，初始值为 0 的空数组::

    var someInts = [Int](repeating: 0, count: 3)

  以下实例创建了含有三个元素的数组::

    var someInts:[Int] = [10, 20, 30]
访问数组
  根据数组的索引来访问数组的元素，语法如下::

    var someVar = someArray[index]
修改数组
  可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素

  也可以通过索引修改数组元素的值
遍历数组
  可以使用for-in循环来遍历所有数组中的数据项
合并数组
  可以使用加法操作符（+）来合并两种已存在的相同类型数组
count 属性
  使用 count 属性来计算数组元素个数
isEmpty 属性
  通过只读属性 isEmpty 来判断数组是否为空

.. note::

  创建数组的方法

  推荐::

    var names: [String] = []
    var lookup: [String: Int] = [:]

  不推荐::

    var names = [String]()
    var lookup = [String: Int]()

Swift 字典
===========================

Swift 字典用来存储无序的相同类型数据的集合，Swift 字典会强制检测元素的类型，如果类型不同则会报错。

Swift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符

如果创建一个字典，并赋值给一个变量，则创建的字典就是可以修改的。这意味着在创建字典后，可以通过添加、删除、修改的方式改变字典里的项目。

如果将一个字典赋值给常量，字典就不可修改，并且字典的大小和内容都不可以修改。


创建字典
  可以使用以下语法来创建一个特定类型的空字典::

    // var someDict =  [KeyType: ValueType]()
    var someDict: [KeyType: ValueType] = ()

  以下是创建一个空字典，键的类型为 Int，值的类型为 String 的简单语法::

    // var someDict = [Int: String]()
    var someDict: [Int: String] = ()

  以下为创建一个字典的实例::

    var someDict:[Int:String] = [1:"One", 2:"Two", 3:"Three"]
访问字典
  我们可以根据字典的索引来访问数组的元素，语法如下::

    var someVar = someDict[key]
修改字典
  可以使用 updateValue(forKey:) 增加或更新字典的内容。
  如果 key 不存在，则添加值，如果存在则修改 key 对应的值。

  updateValue(_:forKey:)方法返回被修改的Optional值

  也可以通过指定的 key 来修改字典的值
移除 Key-Value 对
  可以使用 removeValueForKey() 方法来移除字典 key-value 对

  如果 key 存在该方法返回移除的值，如果不存在返回 nil
遍历字典
  我们可以使用 for-in 循环来遍历某个字典中的键值对::

    import Cocoa

    var someDict:[Int:String] = [1:"One", 2:"Two", 3:"Three"]

    for (key, value) in someDict {
      print("字典 key \(key) -  字典 value \(value)")
    }
字典转换为数组
  可以提取字典的键值(key-value)对，并转换为独立的数组::

    import Cocoa

    var someDict:[Int:String] = [1:"One", 2:"Two", 3:"Three"]

    let dictKeys = [Int](someDict.keys)
    let dictValues = [String](someDict.values)
count 属性
  可以使用只读的 count 属性来计算字典有多少个键值对
isEmpty 属性
  可以通过只读属性 isEmpty 来判断字典是否为空

Swift 函数
===========================

函数定义::

  func funcname(形参) -> returntype
  {
    Statement1
    Statement2
    ……
    Statement N
    return parameters
  }

可变参数
  可变参数可以接受零个或多个值. 通过在变量类型名后面加入（...）的方式来定义
常量，变量及 I/O 参数
  一般默认在函数中定义的参数都是常量参数，也就是这个参数你只可以查询使用，不能改变它的值。
  如果想要声明一个变量参数，可以在参数定义前加 inout 关键字，这样就可以改变这个参数的值了

  例如::

    func  getName(_ name: inout String).........

  一般默认的参数传递都是传值调用的，而不是传引用。所以传入的参数在函数内改变，并不影响原来的那个参数。传入的只是这个参数的副本。

  当传入的参数作为输入输出参数时，需要在参数名前加 & 符，表示这个值可以被函数修改。

  实例::

    import Cocoa

    func swapTwoInts(_ a: inout Int, _ b: inout Int) {
        let temporaryA = a
        a = b
        b = temporaryA
    }


    var x = 1
    var y = 5
    swapTwoInts(&x, &y)
    print("x 现在的值 \(x), y 现在的值 \(y)")

使用函数类型
  可以定义一个类型为函数的常量或变量，并将适当的函数赋值给它::

    var addition: (Int, Int) -> Int = sum

Swift 闭包
===========================

闭包(Closures)是自包含的功能代码块，可以在代码中使用或者用来作为参数传值。

Swift 中的闭包与 C 和 Objective-C 中的代码块（blocks）以及其他一些编程语言中的 匿名函数比较相似。

**全局函数和嵌套函数其实就是特殊的闭包**

大多数情况下, Swift的闭包相当于匿名函数, 比如::

  let driver = {
    print("is driver")
  }

调用::

  driver

但是这并不意味着不能使用参数,
**需要的参数是被写在花括号里面的**:
为了让一个闭包接收参数，
需要在 **花括号之后把这些参数列出来，然后跟上一个 in 关键字**。
这样就告诉Swift，闭包的主体是从哪里开始的::

  let driver = { (place: String) in
    print("is driver in \(place)")
  }

函数和闭包的一个区别是运行闭包的时候你不会用到参数标签,
直接调用即可::

  driver("秋名山")

若需要指定返回值::

  let driver = { (place: String) -> String in
    return "is driver in \(place)"
  }

拖尾闭包语法
---------------------------

如果一个函数的最后一个参数是闭包，
Swift允许你采用一种被称为 “拖尾闭包语法” 的方式来调用这个闭包。
你可以把闭包传入函数之后的花括号里，而不必像传入参数那样。

以下为例::

  func travel(action: () -> Void) {
    print("我准备开车了。")
    action()
    print("我已抵达。")
  }

正常一般会这样调用::

  travel(action: driver)

由于函数的最后一个参数是闭包，我们可以用拖尾闭包语法来调用
上一节的driver::

  travel() {
    print("is driver")
  }

或者::

  travel() {
    print("is driver")
  }

实际上，由于函数没有别的参数了，我们还可以将圆括号完全移除::

  travel {
    print("is driver")
  }

若要接受参数::

  func travel(action: (String) -> Void)
  ...

若需要带返回值::

  travel { (place: String) -> String in
    return "is driver in \(place)"
  }

若知道place与返回类型, 可以去掉注解,
同时因为主体只有一行代码, 所以return也可以去掉,
即::

  travel { place in
    "is driver in \(place)"
  }

Swift还提供一种速记语法，让你可以把代码变得更短。
我们可以让Swift为闭包的参数自动提供一个名字，而不必自行写下 place in。
这些自动生成的名字以$开头，然后跟着一个从0开始的整数，就像下面这样::

  travel {
    "is driver in \($0)。"
  }

Swift 枚举
===========================

枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合。

Swift 的枚举类似于 Objective C 和 C 的结构，枚举的功能为:

- 它声明在类中，可以通过实例化类来访问它的值。
- 枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。
- 可以遵守协议（protocols）来提供标准的功能。

定义::

  enum enumname {
    // 枚举定义放在这里
    case 变量
  }

case关键词表示一行新的成员值将被定义。

.. important::

  和 C 和 Objective-C 不同，Swift 的枚举成员在被创建时不会被赋予一个默认的整型值

Swift 结构体
===========================

Swift 结构体是构建代码所用的一种通用且灵活的构造体。

我们可以为结构体定义属性（常量、变量）和添加方法，从而扩展结构体的功能。

与 C 和 Objective C 不同的是：

  - 结构体不需要包含实现文件和接口。
  - 结构体允许我们创建一个单一文件，且系统会自动生成面向其它代码的外部接口。

结构体总是通过被复制的方式在代码中传递，因此它的值是不可修改的。 **值传递**

通过关键字 struct 来定义结构体::

  struct nameStruct {
    Definition 1
    Definition 2
    ……
    Definition N
  }

Swift 类
===========================

在一个单一文件中定义一个类，系统会自动生成面向其它代码的外部接口。

恒等运算符
  判定两个常量或者变量是否引用同一个类实例，Swift 内建了两个恒等运算符

  - === : 两个常量或者变量引用同一个类实例则返回 true
  - !== : 两个常量或者变量引用不同一个类实例则返回 true

Swift 属性
===========================

存储属性
  一个存储属性就是存储在特定类或结构体的实例里的一个常量或变量
延迟存储属性
  当第一次被调用的时候才会计算其初始值的属性

  在属性声明前使用 lazy 来标示一个延迟存储属性,
  且必须声明为var变量

  一般用于：

  - 延迟对象的创建。
  - 当属性的值依赖于其他未知类
计算属性
  除存储属性外，类、结构体和枚举可以定义计算属性，计算属性不直接存储值，
  而是提供一个 getter 来获取值，一个可选的 setter 来间接设置其他属性或变量的值。
只读计算属性
  只有 getter 没有 setter 的计算属性就是只读计算属性
属性观察器
  属性观察器监控和响应属性值的变化

  不需要为无法重载的计算属性添加属性观察器，因为可以通过 setter 直接监控和响应值的变化。

  可以为属性添加如下的一个或全部观察器：

  - willSet在设置新的值之前调用
  - didSet在新的值被设置之后立即调用
  - willSet和didSet观察器在属性初始化过程中不会被调用

Swift 方法
===========================

self 属性
  类型的每一个实例都有一个隐含属性叫做self，self 完全等同于该实例本身，
  相当于Java的this
在实例方法中修改值类型
  Swift 语言中结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改

  若确实需要修改， 可以选择变异(mutating)这个方法，然后方法就可以从方法内部改变它的属性；
  并且它做的任何改变在方法结束时还会保留在原始结构中。
  方法还可以给它隐含的self属性赋值一个全新的实例，这个新实例在方法结束后将替换原来的实例
在可变方法中给 self 赋值
  可变方法能够赋给隐含属性 self 一个全新的实例。
类型方法
  就是类方法

Swift 下标
===========================

某些方面也可以理解为增加类似数组的功能

下标脚本允许你通过在实例后面的方括号中传入一个或者多个的索引值来对实例进行访问和赋值。

语法类似于实例方法和计算型属性的混合。

与定义实例方法类似，定义下标脚本使用subscript关键字，显式声明入参（一个或多个）和返回类型。

与实例方法不同的是下标脚本可以设定为读写或只读。这种方式又有点像计算型属性的getter和setter::

  subscript(index: Int) -> Int {
      get {
          // 用于下标脚本值的声明
      }
      set(newValue) {
          // 执行赋值操作
      }
  }

参考: https://www.runoob.com/swift/swift-subscripts.html

实例::

  import Cocoa

  struct subexample {
      let decrementer: Int
      subscript(index: Int) -> Int {
          return decrementer / index
      }
  }
  let division = subexample(decrementer: 100)

  print("100 除以 9 等于 \(division[9])")
  print("100 除以 2 等于 \(division[2])")
  print("100 除以 3 等于 \(division[3])")
  print("100 除以 5 等于 \(division[5])")
  print("100 除以 7 等于 \(division[7])")

用法
  根据使用场景不同下标脚本也具有不同的含义。

  通常下标脚本是用来访问集合（collection），列表（list）或序列（sequence）中元素的快捷方式。

  你可以在你自己特定的类或结构体中自由的实现下标脚本来提供合适的功能。

Swift 继承
===========================

继承
  使用冒号
重写（Overriding）
  子类可以通过继承来的实例方法，类方法，实例属性，
  或下标脚本来实现自己的定制功能，我们把这种行为叫重写（overriding）。

  子类可以通过继承来的实例方法，类方法，实例属性，或下标脚本来实现自己的定制功能，
  把这种行为叫重写（overriding）。
防止重写
  使用 final 关键字防止它们被重写。

Swift 构造过程
===========================

构造函数使用 init() 方法

类实例也可以通过定义析构器（deinitializer）在类实例释放之前执行清理内存的工作。

存储型属性的初始赋值
  类和结构体在实例创建时，必须为所有存储型属性设置合适的初始值。

  存储属性在构造器中赋值时，它们的值是被直接设置的，不会触发任何属性观测器。

  存储属性在构造器中赋值流程：

  - 创建初始值。
  - 在属性定义中指定默认属性值。
  - 初始化实例，并调用 init() 方法。

构造过程中修改常量属性
  只要在构造过程结束前常量的值能确定，你可以在构造过程中的任意时间点修改常量属性的值

  对某个类实例来说，它的常量属性只能在定义它的类的构造过程中修改；不能在子类中修改。
默认构造器
  默认构造器将简单的创建一个所有属性值都设置为默认值的实例:
结构体的逐一成员构造器
  如果结构体对所有存储型属性提供了默认值且自身没有提供定制的构造器，
  它们能自动获得一个逐一成员构造器

  如::

    struct Rectangle {
        var length = 100.0, breadth = 200.0
    }
    let area = Rectangle(length: 24.0, breadth: 32.0)

    print("矩形的面积: \(area.length)")
    print("矩形的面积: \(area.breadth)")
值类型的构造器代理
  构造器可以通过调用其它构造器来完成实例的部分构造过程。
  这一过程称为构造器代理，它能减少多个构造器间的代码重复。
构造器的继承和重载
  Swift 中的子类不会默认继承父类的构造器。

  父类的构造器仅在确定和安全的情况下被继承。

  当你重写一个父类指定构造器时，你需要写override修饰符
可失败构造器
  可以在一个类，结构体或是枚举类型的定义中，添加一个或多个可失败构造器。
  其语法为在init关键字后面加添问号(init?)。

Swift 析构过程
===========================

在一个类的实例被释放之前，析构函数被立即调用。

用关键字deinit来标示析构函数，类似于初始化函数用init来标示。析构函数只适用于类类型。

Swift 可选链
===========================

参考: https://www.runoob.com/swift/swift-optional-chaining.html

调用时候使用问号/叹号，

- 问号表示可能为空， 为空则不继续调用
- 叹号表示强制调用（最好确定一定可以调用）

.. note::

  这点与ts基本一致

Swift 自动引用计数（ARC）
===========================

Swift 使用自动引用计数（ARC）这一机制来跟踪和管理应用程序的内存

通常情况下我们不需要去手动释放内存，因为 ARC 会在类的实例不再被使用时，自动释放其占用的内存。

但在有些时候我们还是需要在代码中实现内存管理。

ARC 功能
  - 当每次使用 init() 方法创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。
  - 内存中会包含实例的类型信息，以及这个实例所有相关属性的值。
  - 当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。
  - 为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。
  - 实例赋值给属性、常量或变量，它们都会创建此实例的强引用，只要强引用还在，实例是不允许被销毁的。

类实例之间的循环强引用
  循环引用， 永远不会被回收

  Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题

  - 弱引用: ``weak var 变量``
  - 无主引用: ``unowned let 变量``

  弱引用和无主引用允许循环引用中的一个实例引用另外一个实例而不保持强引用。
  这样实例能够互相引用而不产生循环强引用。

  对于生命周期中会变为nil的实例使用弱引用。
  相反的，对于初始化赋值后再也不会被赋值为nil的实例，使用无主引用。

  循环强引用还会发生在当你将一个闭包赋值给类实例的某个属性，
  并且这个闭包体中又使用了实例

Swift 类型转换
===========================

Swift 语言类型转换可以判断实例的类型。也可以用于检测实例类型是否属于其父类或者子类的实例。

- is: 检测值的类型
- as: 转换类型

向下转型
  向下转型，用类型转换操作符(as? 或 as!)

  当你不确定向下转型可以成功时，用类型转换的条件形式(as?)。
  条件形式的类型转换总是返回一个可选值（optional value），
  并且若下转是不可能的，可选值将是 nil。

  只有你可以确定向下转型一定会成功时，才使用强制形式(as!)。
  当你试图向下转型为一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。
Any和AnyObject的类型转换
  Swift为不确定类型提供了两种特殊类型别名：

  - AnyObject可以代表任何class类型的实例。
  - Any可以表示任何类型，包括方法类型（function types）。

  只有当你明确的需要它的行为和功能时才使用Any和AnyObject。
  在你的代码里使用你期望的明确的类型总是更好的。

Swift 扩展
===========================

扩展就是向一个已有的类、结构体或枚举类型添加新功能。

扩展可以对一个类型添加新的功能，但是不能重写已有的功能。

语法
  扩展声明使用关键字 extension::

    extension SomeType {
        // 加到SomeType的新功能写到这里
    }

  一个扩展可以扩展一个已有类型，使其能够适配一个或多个协议，语法格式如下::

    extension SomeType: SomeProtocol, AnotherProctocol {
        // 协议实现写到这里
    }

  下面的例子向 Int 类型添加了 5 个计算型实例属性并扩展其功能::

    extension Int {
      var add: Int {return self + 100 }
      var sub: Int { return self - 10 }
      var mul: Int { return self * 10 }
      var div: Int { return self / 5 }
    }

    let addition = 3.add
    print("加法运算后的值：\(addition)")

Swift 协议
===========================

应该就是接口吧

协议的语法格式如下::

  protocol SomeProtocol {
      // 协议内容
  }

要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔.
遵循多个协议时，各协议之间用逗号,分隔::

  struct SomeStructure: FirstProtocol, AnotherProtocol {
      // 结构体内容
  }

如果类在遵循协议的同时拥有父类，应该将父类名放在协议名之前，以逗号分隔::

  class SomeClass: SomeSuperClass, FirstProtocol, AnotherProtocol {
      // 类的内容
  }

类专属协议
  可以在协议的继承列表中,通过添加class关键字,限制协议只能适配到类（class）类型。

  该class关键字必须是第一个出现在协议的继承列表中，其后，才是其他继承协议。格式如下::

    protocol SomeClassOnlyProtocol: class, SomeInheritedProtocol {
        // 协议定义
    }

Swift 泛型
===========================

类型约束

关联类
  使用 associatedtype 关键字来设置关联类型实例
Where 语句
  可以在参数列表中通过where语句定义参数的约束

Swift 访问控制
===========================

- public	可以访问自己模块中源文件里的任何实体，别人也可以通过引入该模块来访问源文件里的所有实体。
- internal	可以访问自己模块中源文件里的任何实体，但是别人不能访问该模块中源文件里的实体。
- fileprivate	文件内私有，只能在当前源文件中使用。
- private	只能在类中访问，离开了这个类或者结构体的作用域外面就无法访问。

枚举类型访问权限
  枚举中成员的访问级别继承自该枚举，你不能为枚举中的成员单独申明不同的访问级别。
子类访问权限
  子类的访问级别不得高于父类的访问级别。
  比如说，父类的访问级别是 internal，子类的访问级别就不能申明为 public。

