============================
Java
============================

.. toctree::

  安装
  编译执行
  构建工具
  一些备忘
  IDEA配置Gradle项目
  IO模型
  DDD


安卓开发
============================

.. toctree::

  安卓开发/index

内存泄漏与内存溢出
============================

内存溢出
  JVM内存有限。如果对象太多，JVM内存放不下了，就会内存溢出。
内存泄漏
  JVM的垃圾回收只会回首引用计数为0的对象,
  如果存在循环引用, 或者没有及时回收调用, 就会一直存在

  如下代码中，obj的值是null，因此是“无用的”；
  但同时obj又同时被被list引用，因此是“可达”的，所以此时的obj就会造成内存泄漏。::

    Object obj = new Object();
    list.add( obj );
    obj = null ;

  除了上面obj这种内存泄漏的情况以外，
  在实际开发中最常见的内存泄漏就是打开资源后没有调用close()方法。
  例如socket、io流等，都需要再最后close()一下防止内存泄漏。

