===================
迭代器/生成器
===================

手动遍历迭代器
===================

使用 next() 函数并在代码中捕获 StopIteration 异 常::

  def manual_iter():
    with open('/etc/passwd') as f:
      try:
        while True:
          line = next(f)
          print(line, end='')
      except StopIteration:
        pass

通常来讲，StopIteration 用来指示迭代的结尾。
然而，还可以通过返回一个指定值来标记结尾，比如 None 。下面是 示例::

  with open('/etc/passwd') as f:
    while True:
      line = next(f, None)
      if line is None:
        break
      print(line, end='')

大多数情况下，我们会使用 for 循环语句用来遍历一个可迭代对象。
但是，偶尔也 需要对迭代做更加精确的控制，这时候了解底层迭代机制就显得尤为重要了::

  >>> items = [1, 2, 3]
  >>> # Get the iterator
  >>> it = iter(items) # Invokes items.__iter__()
  >>> # Run the iterator
  >>> next(it) # Invokes it.__next__()
  1
  >>> next(it)
  2
  >>> next(it)
  3
  >>> next(it)
  Traceback (most recent call last):
  File "<stdin>", line 1, in <module> StopIteration
  >>>

代理迭代
===================

你构建了一个自定义容器对象，里面包含有列表、元组或其他可迭代对象。你想直 接在你的这个新容器对象上执行迭代操作

实际上你只需要定义一个 ``__iter__()`` 方法，将迭代操作代理到容器内部的对象上 去。比如::

  class Node:
    def __init__(self, value):
      self._value = value
      self._children = []
    def __repr__(self):
      return 'Node({!r})'.format(self._value)

    def add_child(self, node):
      self._children.append(node)

    def __iter__(self):
      return iter(self._children)

Python 的迭代器协议需要 ``__iter__()`` 方法返回一个实现了 ``__next__()`` 方法的 迭代器对象。
如果你只是迭代遍历其他容器的内容，你无须担心底层是怎样实现的。你 所要做的只是传递迭代请求既可。

这里的 iter() 函数的使用简化了代码，iter(s) 只是简单的通过调用 ``s. __iter__()`` 方法来返回对应的迭代器对象，
就跟 len(s) 会调用 ``s.__len__()`` 原理 是一样的。

使用生成器创建新的迭代模式
======================================

你想实现一个自定义迭代模式，跟普通的内置函数比如 range() , reversed() 不 一样::

  def frange(start, stop, increment):
    x = start
    while x < stop:
      yield x
      x += increment

一个函数中需要有一个 yield 语句即可将其转换为一个生成器。跟普通函数不同 的是，生成器只能用于迭代操作。

一个生成器函数主要特征是它只会回应在迭代中使用到的 next 操作。一旦生成器 函数返回退出，迭代终止。
我们在迭代中通常使用的 for 语句会自动处理这些细节，所 以你无需担心。

实现迭代器协议
===================

构建一个能支持迭代操作的自定义对象，并希望找到一个能实现迭代协议的 简单方法。

目前为止，在一个对象上实现迭代最简单的方式是使用一个生成器函数.
你可能想实现一个以深度优先方式遍历树形 节点的生成器。下面是代码示例::

  class Node:
    def __init__(self, value):
          self._value = value
          self._children = []

    def __repr__(self):
      return 'Node({!r})'.format(self._value)

    def add_child(self, node):
      self._children.append(node)

    def __iter__(self):
      return iter(self._children)

    def depth_first(self):
      yield self
      for c in self:
        yield from c.depth_first()

反向迭代
===================

反方向迭代一个序列

使用内置的 reversed() 函数::

  >>> a = [1, 2, 3, 4]
  >>> for x in reversed(a):
  ...   print(x)
  ...
  4
  3
  2
  1

反向迭代仅仅当对象的大小可预先确定或者对象实现了 ``__reversed__()`` 的特殊 方法时才能生效。
如果两者都不符合，那你必须先将对象转换为一个列表才行::

  # Print a file backwards
  f = open('somefile')
  for line in reversed(list(f)):
    print(line, end='')

要注意的是如果可迭代对象元素很多的话，将其预先转换为一个列表要消耗大量 的内存

很多程序员并不知道可以通过在自定义类上实现 ``__reversed__()`` 方法来实现反 向迭代。比如::

  class Countdown:
    def __init__(self, start):
      self.start = start

    # Forward iterator
    def __iter__(self):
      n = self.start
      while n > 0:
        yield n
        n -= 1

    # Reverse iterator
    def __reversed__(self):
      n=1
      while n <= self.start:
        yield n
        n += 1

定义一个反向迭代器可以使得代码非常的高效，因为它不再需要将数据填充到一 个列表中然后再去反向迭代这个列表::

  from collections import deque

  class linehistory:
    def __init__(self, lines, histlen=3):
      self.lines = lines
      self.history = deque(maxlen=histlen)

    def __iter__(self):
      for lineno, line in enumerate(self.lines, 1):
        self.history.append((lineno, line))
        yield line

    def clear(self): self.history.clear()

带有外部状态的生成器函数
======================================

定义一个生成器函数，但是它会调用某个你想暴露给用户使用的外部状态值

如果你想让你的生成器暴露外部状态给用户，别忘了你可以简单的将它实现为一 个类，然后把生成器函数放到 ``__iter__()`` 方法中过去

迭代器切片
===================

你想得到一个由迭代器生成的切片对象，但是标准切片操作并不能做到。

函数 itertools.islice() 正好适用于在迭代器和生成器上做切片操作。比如::

    >>> def count(n):
    ...  while True:
    ...    yield n
    ...    n += 1
    ...
    >>> c = count(0)
    >>> c[10:20]
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module> TypeError: 'generator' object is not subscriptable
    >>> # Now using islice()
    >>> import itertools
    >>> for x in itertools.islice(c, 10, 20): ... print(x)
    ...
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    >>>

迭代器和生成器不能使用标准的切片操作，因为它们的长度事先我们并不知道 (并 且也没有实现索引)。
函数 islice() 返回一个可以生成指定元素的迭代器，它通过遍 历并丢弃直到切片开始索引位置的所有元素。
然后才开始一个个的返回元素，并直到切 片结束索引位置。

这里要着重强调的一点是 islice() 会消耗掉传入的迭代器中的数据。
必须考虑到 迭代器是不可逆的这个事实。所以如果你需要之后再次访问这个迭代器的话，那你就得 先将它里面的数据放入一个列表中。

跳过可迭代对象的开始部分
======================================

你想遍历一个可迭代对象，但是它开始的某些元素你并不感兴趣，想跳过它们。

itertools 模块中有一些函数可以完成这个任务。首先介绍的是 itertools. dropwhile() 函数。
使用时，你给它传递一个函数对象和一个可迭代对象。
它会返 回一个迭代器对象，丢弃原有序列中直到函数返回 Flase 之前的所有元素，然后返回后 面所有元素。

如果你想跳过开始部分的注释行的话，可以这样做::

  >>> from itertools import dropwhile
  >>> with open('/etc/passwd') as f:
  ...   for line in dropwhile(lambda line: line.startswith('#'), f):
  ...     print(line, end='')
  ...
  nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
  root:*:0:0:System Administrator:/var/root:/bin/sh
  ...
  >>>

这个例子是基于根据某个测试函数跳过开始的元素。
如果你已经明确知道了要跳 过的元素的个数的话，那么可以使用 itertools.islice() 来代替。比如::

  >>> from itertools import islice
  >>> items = ['a', 'b', 'c', 1, 4, 10, 15]
  >>> for x in islice(items, 3, None):
  ...   print(x)
  ...
  1
  4
  10
  15

islice() 函数最后那个 None 参数指定了你要获取从第 3 个到最 后的所有元素，
如果 None 和 3 的位置对调，意思就是仅仅获取前三个元素恰恰相反， (这个跟切片的相反操作 [3:] 和 [:3] 原理是一样的)。

排列组合的迭代
===================

你想迭代遍历一个集合中元素的所有可能的排列或组合, 即 **全排列** 问题.

itertools 模块提供了三个函数来解决这类问题。
其中一个是 itertools.permutations() ，它接受一个集合并产生一个元组序列，每个元组由集合中所有 元素的一个可能排列组成。
也就是说通过打乱集合中元素排列顺序生成一个元组，比 如::

  >>> items = ['a', 'b', 'c']
  >>> from itertools import permutations
  >>> for p in permutations(items):
  ...   print(p)
  ...
  ('a', 'b', 'c')
  ('a', 'c', 'b')
  ('b', 'a', 'c')
  ('b', 'c', 'a')
  ('c', 'a', 'b')
  ('c', 'b', 'a')
  >>>

如果你想得到指定长度的所有排列，你可以传递一个可选的长度参数。就像这样::

  >>> for p in permutations(items, 2):
  ...   print(p)
  ...
  ('a', 'b')
  ('a', 'c')
  ('b', 'a')
  ('b', 'c')
  ('c', 'a')
  ('c', 'b')
  >>>

使用 itertools.combinations() 可得到输入集合中元素的所有的组合。比如::

  >>> from itertools import combinations
  >>> for c in combinations(items, 3):
  ...   print(c)
  ...
  ('a', 'b', 'c')
  >>> for c in combinations(items, 2):
  ...   print(c)
  ...
  ('a', 'b')
  ('a', 'c')
  ('b', 'c')

  >>> for c in combinations(items, 1):
  ...   print(c)
  ...
  ('a',)
  ('b',)
  ('c',)
  >>>

对于 combinations() 来讲，元素的顺序已经不重要了。
也就是说，组合 ('a', 'b') 跟 ('b', 'a') 其实是一样的 (最终只会输出其中一个)。

在计算组合的时候，一旦元素被选取就会从候选中剔除掉 (比如如果元 素’a’已经被选取了，那么接下来就不会再考虑它了)。
而函数 itertools. combinations_with_replacement() 允许同一个元素被选择多次，比如::

  >>> for c in combinations_with_replacement(items, 3):
  ...   print(c)
  ...
  ('a', 'a', 'a')
  ('a', 'a', 'b')
  ('a', 'a', 'c')
  ('a', 'b', 'b')
  ('a', 'b', 'c')
  ('a', 'c', 'c')
  ('b', 'b', 'b')
  ('b', 'b', 'c')
  ('b', 'c', 'c')
  ('c', 'c', 'c')
  >>>

当我们碰到看上去有些复杂的迭 代问题时，最好可以先去看看 itertools 模块。
如果这个问题很普遍，那么很有可能会在 里面找到解决方案!

序列上索引值迭代
===================

你想在迭代一个序列的同时跟踪正在被处理的元素索引。

内置的 enumerate() 函数可以很好的解决这个问题, enumerate 接受一个参数作为起始序号, 默认为0::

  >>> my_list = ['a', 'b', 'c']
  >>> for idx, val in enumerate(my_list, 1):
  ...   print(idx, val)
  ...
  1a
  2b
  3c

enumerate() 函数返回的是一个 enumerate 对象实例，它是一个迭代器，返回连 续的包含一个计数和一个值的元组，
元组中的值通过在传入序列上调用 next() 返回。

还有一点可能并不很重要，但是也值得注意，有时候当你在一个已经解压后的元组 序列上使用 enumerate() 函数时很容易调入陷阱。
你得像下面正确的方式这样写::

  data = [ (1, 2), (3, 4), (5, 6), (7, 8) ]

  # Correct!
  for n, (x, y) in enumerate(data): ...

  # Error!
  for n, x, y in enumerate(data): ...

同时迭代多个序列
===================

你想同时迭代多个序列，每次分别从一个序列中取一个元素。

使用 zip() 函数::

  >>> xpts = [1, 5, 4, 2, 10, 7]
  >>> ypts = [101, 78, 37, 15, 62, 99]
  >>> for x, y in zip(xpts, ypts):
  ...   print(x,y)
  ...
  1 101
  5 78
  4 37
  2 15
  10 62
  7 99
  >>>

zip(a, b) 会生成一个可返回元组 (x, y) 的迭代器，其中 x 来自 a，y 来自 b。
一 旦其中某个序列到底结尾，迭代宣告结束。因此迭代长度跟参数中最短序列长度一致。

如果这个不是你想要的效果，那么还可以使用 itertools.zip_longest() 函数来 代替::

  >>> from itertools import zip_longest
  >>> for i in zip_longest(a,b):
  ...   print(i)
  ...
  (1, 'w')
  (2, 'x')
  (3, 'y')
  (None, 'z')
  >>> for i in zip_longest(a, b, fillvalue=0):
  ...   print(i)
  ...
  (1, 'w')
  (2, 'x')
  (3, 'y')
  (0, 'z')
  >>>

不同集合上元素的迭代
======================================

你想在多个对象执行相同的操作，但是这些对象在不同的容器中，你希望代码在不 失可读性的情况下避免写重复的循环。

itertools.chain() 方法可以用来简化这个任务。
它接受一个可迭代对象列表作 为输入，并返回一个迭代器，有效的屏蔽掉在多个容器中迭代细节。
为了演示清楚，考 虑下面这个例子::

  >>> from itertools import chain
  >>> a = [1, 2, 3, 4]
  >>> b = ['x', 'y', 'z']
  >>> for x in chain(a, b):
  ...   print(x)
  ...
  1
  2
  3 4 x y z
  >>>

tertools.chain() 接受一个或多个可迭代对象最为输入参数。
然后创建一个迭 代器，依次连续的返回每个可迭代对象中的元素。
这种方式要比先将序列合并再迭代要 高效的多。

创建数据处理管道
===================

以数据管道 (类似 Unix 管道) 的方式迭代处理数据。比如，你有个大量的数据 需要处理，但是不能将它们一次性放入内存中。

生成器函数是一个实现管道机制的好办法

函数内使用 yield 作为生产者, 外部 for 作为 消费者, 来组成处理管道.

展开嵌套的序列
===================

你想将一个多层嵌套的序列展开成一个单层列表

yield from 在你想在生成器中调用其他生成器作为子例程的时候非常有用

顺序迭代合并后的排序迭代对象
======================================

有一系列排序序列，想将它们合并后得到一个排序序列并在上面迭代遍历。

heapq.merge() 函数::

  >>> import heapq
  >>> a = [1, 4, 7, 10]
  >>> b = [2, 5, 6, 11]
  >>> for c in heapq.merge(a, b):
  ...   print(c)
  ...
  1
  2
  4
  5
  6
  7
  10
  11

heapq.merge 可迭代特性意味着它不会立马读取所有序列。这就意味着你可以在 非常长的序列中使用它，而不会有太大的开销。
比如，下面是一个例子来演示如何合并 两个排序文件::

  with open('sorted_file_1', 'rt') as file1, \
      open('sorted_file_2', 'rt') as file2, \
      open('merged_file', 'wt') as outf:

    for line in heapq.merge(file1, file2):
      outf.write(line)

有一点要强调的是 heapq.merge() 需要所有输入序列必须是排过序的。
特别的， 它并不会预先读取所有数据到堆栈中或者预先排序，也不会对输入做任何的排序检测。
它仅仅是检查所有序列的开始部分并返回最小的那个，这个过程一直会持续直到所有 输入序列中的元素都被遍历完。

迭代器代替 while 无限循环
======================================

你在代码中使用 while 循环来迭代处理数据，因为它需要调用某个函数或者和一 般迭代模式不同的测试条件。
能不能用迭代器来重写这个循环呢?

一个常见的 IO 操作程序可能会想下面这样::

  CHUNKSIZE = 8192
  def reader(s):
    while True:
      data = s.recv(CHUNKSIZE)
      if data == b'':
        break
      process_data(data)

这种代码通常可以使用 iter() 来代替，如下所示::

  def reader2(s):
    for chunk in iter(lambda: s.recv(CHUNKSIZE), b''):
      pass
      # process_data(data)

iter 函数一个鲜为人知的特性是它接受一个可选的 callable 对象和一个标记 (结 尾) 值作为输入参数。
当以这种方式使用的时候，它会创建一个迭代器，这个迭代器会 不断调用 callable 对象直到返回值和标记值相等为止。


迭代器与生成器区别
===================

- 迭代器提供一种顺序访问集合或序列元素的方式，使用 next() 方法获取每个元素。
- 生成器是一种特殊类型的函数，通过使用 yield 关键字生成序列值，
  每次调用生成器函数返回一个迭代器对象，通过迭代器对象可以按需获取生成的序列值。


