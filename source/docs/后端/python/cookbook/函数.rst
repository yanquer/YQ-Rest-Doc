==========================
函数
==========================


.. post:: 2023-02-20 22:06:49
  :tags: python, cookbook
  :category: 后端
  :author: YanQue
  :location: CD
  :language: zh-cn


使用 def 语句定义函数是所有程序的基础。本章的目标是讲解一些更加高级和不
常见的函数定义与使用模式。涉及到的内容包括默认参数、任意数量参数、强制关键字
参数、注解和闭包。另外，一些高级的控制流和利用回调函数传递数据的技术在这里也
会讲解到。

可接受任意数量参数的函数
==========================

接受任意数量的位置参数, 使用 ``*`` ::

  def avg(first, *rest):
    return (first + sum(rest)) / (1 + len(rest))

  # Sample use
  avg(1, 2) # 1.5
  avg(1, 2, 3, 4) # 2.5

接受任意数量的关键字参数，使用一个以 ``**`` ::

  def make_element(name, value, **attrs): ...

- 位置参数实际是元组
- 关键字参数实际是字典

一起用::

  def anyargs(*args, **kwargs): ...

一个 ``*`` 参数只能出现在函数定义中最后一个位置参数后面，而 ``**`` 参数只能出现在
最后一个参数。有一点要注意的是，在 * 参数后面仍然可以定义其他参数::

  def a(x, *args, y): ...

  def b(x, *args, y, **kwargs): ...

即 强制关键字参数.

只接受关键字参数的函数
==========================

希望函数的某些参数强制使用关键字参数传递

将强制关键字参数放到某个 ``*`` 参数或者单个 ``*`` 后面就能达到这种效果::

  def recv(maxsize, *, block):
    'Receives a message'
    pass

  recv(1024, True) # TypeError
  recv(1024, block=True) # Ok

给函数参数增加元信息
==========================

你写好了一个函数，然后想为这个函数的参数增加一些额外的信息，这样的话其他
使用者就能清楚的知道这个函数应该怎么使用。

使用函数参数注解::

  def add(x:int, y:int) -> int:
    return x + y

python 解释器不会对这些注解添加任何的语义。它们不会被类型检查，运行时跟
没有加注解之前的效果也没有任何差距。然而，对于那些阅读源码的人来讲就很有帮助
啦。第三方工具和框架可能会对这些注解添加语义。同时它们也会出现在文档中。

函数注解只存储在函数的 __annotations__ 属性中

返回多个值的函数
==========================

函数直接 return 一个元组就行::

  def myfun():
    return 1, 2, 3

看上去返回了多个值，实际上是先创建了一个元组然后返回的。这
个语法看上去比较奇怪，实际上我们使用的是逗号来生成一个元组，而不是用括号.

定义有默认参数的函数
==========================

定义一个函数或者方法，它的一个或多个参数是可选的并且有一个默认值

直接在函数定义中给参数指定一个默
认值，并放到参数列表最后就行了::

  def spam(a, b=42):
    print(a, b)

如果默认参数是一个可修改的容器比如一个列表、集合或者字典，可以使用 None
作为默认值::

  # Using a list as a default value
  def spam(a, b=None):
    if b is None: b = []

如果你并不想提供一个默认值，而是想仅仅测试下某个默认参数是不是有传递进
来，可以像下面这样写::

  _no_value = object()

  def spam(a, b=_no_value):
    if b is _no_value:
      print('No b value supplied')

测试::

  >>> spam(1)
  No b value supplied
  >>> spam(1, 2) # b = 2
  >>> spam(1, None) # b = None
  >>>

仔细观察可以发现到传递一个 None 值和不传值两种情况是有差别的。

默认参数的值仅仅在函数定义的时候赋值一次::

  >>> x = 42
  >>> def spam(a, b=x):
  ... print(a, b)
  ...
  >>> spam(1)
  1 42
  >>> x = 23 # Has no effect
  >>> spam(1)
  1 42
  >>>

默认参数的值应该是不可变的对象，比如 None、True、False、数字或字符
串。

最后一个问题比较微妙，那就是一个函数需要测试某个可选参数是否被使用者传
递进来。这时候需要小心的是你不能用某个默认值比如 None、0 或者 False 值来测试用
户提供的值 (因为这些值都是合法的值，是可能被用户传递进来的)。因此，你需要其他
的解决方案了。

为了解决这个问题，你可以创建一个独一无二的私有对象实例，就像上面的
_no_value 变量那样。在函数里面，你可以通过检查被传递参数值跟这个实例是否一样
来判断。这里的思路是用户不可能去传递这个 _no_value 实例作为输入。因此，这里
通过检查这个值就能确定某个参数是否被传递进来了。

定义匿名或内联函数
==========================

你想为 sort() 操作创建一个很短的回调函数，但又不想用 def 去写一个单行函
数，而是希望通过某个快捷方式以内联方式来创建这个函数。

以使用 lambda 表达式::

  >>> add = lambda x, y: x + y
  >>> add(2,3) 5
  >>> add('hello', 'world')
  'helloworld'
  >>>

尽管 lambda 表达式允许你定义简单函数，但是它的使用是有限制的。你只能指定
单个表达式，它的值就是最后的返回值。也就是说不能包含其他的语言特性了，包括多
个语句、条件表达式、迭代以及异常处理等等。

匿名函数捕获变量值
==========================

用 lambda 定义了一个匿名函数，并想在定义时捕获到某些变量的值。

lambda 表达式中的 x 是一个自由变量，在运行时绑定值，而不
是定义时就绑定，这跟函数的默认值参数定义是不同的。因此，在调用这个 lambda 表
达式的时候，x 的值是执行时的值::

  >>> x = 10
  >>> a = lambda y: x + y
  >>> x = 20
  >>> b = lambda y: x + y
  >>>
  >>> a(10)
  30
  >>> b(10)
  30
  >>>

如果你想让某个匿名函数在定义时就捕获到值，可以将那个参数值定义成默认参
数即可，就像下面这样::

  >>> x = 10
  >>> a = lambda y, x=x: x + y
  >>> x = 20
  >>> b = lambda y, x=x: x + y
  >>> a(10)
  20
  >>> b(10)
  30
  >>>

在这里列出来的问题是新手很容易犯的错误，有些新手可能会不恰当的使用
lambda 表达式。比如，通过在一个循环或列表推导中创建一个 lambda 表达式列表，并
期望函数能在定义时就记住每次的迭代值。例如::

  >>> funcs = [lambda x: x+n for n in range(5)]
  >>> for f in funcs:
  ...   print(f(0))
  ...
  4
  4
  4
  4
  4
  >>>

但是实际效果是运行是 n 的值为迭代的最后一个值。现在我们用另一种方式修改
一下::

  >>> funcs = [lambda x, n=n: x+n for n in range(5)]
  >>> for f in funcs:
  ...   print(f(0))
  ...
  0
  1
  2
  3
  4
  >>>

通过使用函数默认值参数形式，lambda 函数在定义时就能绑定到值。

减少可调用对象的参数个数
==========================

你有一个被其他 python 代码使用的 callable 对象，可能是一个回调函数或者是一
个处理器，但是它的参数太多了，导致调用时出错。

如果需要减少某个函数的参数个数，你可以使用 functools.partial() 。partial()
函数允许你给一个或多个参数设置固定的值，减少接下来被调用时的参数个数。为了演
示清楚，假设你有下面这样的函数::

  def spam(a, b, c, d):
    print(a, b, c, d)

使用 partial() 函数来固定某些参数值::

  >>> from functools import partial
  >>> s1 = partial(spam, 1) # a = 1
  >>> s1(2, 3, 4)
  1 2 3 4
  >>> s1(4, 5, 6)
  1 4 5 6
  >>> s2 = partial(spam, d=42) # d = 42
  >>> s2(1, 2, 3)
  1 2 3 42
  >>> s2(4, 5, 5)
  4 5 5 42
  >>> s3 = partial(spam, 1, 2, d=42) # a = 1, b = 2, d = 42
  >>> s3(3)
  1 2 3 42
  >>> s3(4)
  1 2 4 42
  >>> s3(5)
  1 2 5 42
  >>>

可以看出 partial() 固定某些参数并返回一个新的 callable 对象。这个新的 callable
接受未赋值的参数，然后跟之前已经赋值过的参数合并起来，最后将所有参数传递给原
始函数。

本节要解决的问题是让原本不兼容的代码可以一起工作。下面我会列举一系列的
例子。

第一个例子是，假设你有一个点的列表来表示 (x,y) 坐标元组。你可以使用下面的
函数来计算两点之间的距离::

  points = [ (1, 2), (3, 4), (5, 6), (7, 8) ]
  import math
  def distance(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return math.hypot(x2 - x1, y2 - y1)

现在假设你想以某个点为基点，根据点和基点之间的距离来排序所有的这些点。列
表的 sort() 方法接受一个关键字参数来自定义排序逻辑，但是它只能接受一个单个参
数的函数 (distance() 很明显是不符合条件的)。现在我们可以通过使用 partial() 来解
决这个问题::

  >>> pt = (4, 3)
  >>> points.sort(key=partial(distance,pt))
  >>> points
  [(3, 4), (1, 2), (5, 6), (7, 8)]
  >>>

将单方法的类转换为函数
==========================

有一个除 __init__() 方法外只定义了一个方法的类。为了简化代码，你想将它
转换成一个函数


大多数情况下，可以使用闭包来将单个方法的类转换成函数。举个例子，下面示例
中的类允许使用者根据某个模板方案来获取到 URL 链接地址::

  from urllib.request import urlopen

  class UrlTemplate:
    def __init__(self, template):
      self.template = template

    def open(self, **kwargs):
      return urlop

这个类可以被一个更简单的函数来代替::

  def urltemplate(template):
    def opener(**kwargs):
      return urlopen(template.format_map(kwargs))
    return opener

大部分情况下，你拥有一个单方法类的原因是需要存储某些额外的状态来给方法
使用。比如，定义 UrlTemplate 类的唯一目的就是先在某个地方存储模板值，以便将来
可以在 open() 方法中使用。

使用一个内部函数或者闭包的方案通常会更优雅一些。简单来讲，一个闭包就是
一个函数，只不过在函数内部带上了一个额外的变量环境。闭包关键特点就是它会记
住自己被定义时的环境。因此，在我们的解决方案中，opener() 函数记住了 template
参数的值，并在接下来的调用中使用它。

任何时候只要你碰到需要给某个函数增加额外的状态信息的问题，都可以考虑使
用闭包。相比将你的函数转换成一个类而言，闭包通常是一种更加简洁和优雅的方案。

带额外状态信息的回调函数
==========================

你的代码中需要依赖到回调函数的使用 (比如事件处理器、等待后台任务完成后的
回调等)，并且你还需要让回调函数拥有额外的状态值，以便在它的内部使用到。

主要讨论的是那些出现在很多函数库和框架中的回调函数的使用——特
别是跟异步处理有关的。为了演示与测试，我们先定义如下一个需要调用回调函数的函
数::

  def apply_async(func, args, *, callback):
    # Compute the result
    result = func(*args)
    # Invoke the callback with the result
    callback(result)

使用::

  >>> def print_result(result):
  ...   print('Got:', result)
  ...
  >>> def add(x, y):
  ...   return x + y
  ...
  >>> apply_async(add, (2, 3), callback=print_result)
  Got: 5
  >>> apply_async(add, ('hello', 'world'), callback=print_result)
  Got: helloworld
  >>>

使用一个闭包捕获状态值::

  def make_handler():
    sequence = 0

  def handler(result):
    nonlocal sequence
    sequence += 1
    print('[{}] Got: {}'.format(sequence, result))
    return handler

使用::

  >>> handler = make_handler()
  >>> apply_async(add, (2, 3), callback=handler)
  [1] Got: 5
  >>> apply_async(add, ('hello', 'world'), callback=handler)
  [2] Got: helloworld
  >>>

还有另外一个更高级的方法，可以使用协程来完成同样的事情::

  def make_handler():
    sequence = 0
    while True:
      result = yield
      sequence += 1
      print('[{}] Got: {}'.format(sequence, result))

对于协程，你需要使用它的 send() 方法作为回调函数，如下所示::

  >>> handler = make_handler()
  >>> next(handler) # Advance to the yield
  >>> apply_async(add, (2, 3), callback=handler.send)
  [1] Got: 5
  >>> apply_async(add, ('hello', 'world'), callback=handler.send)
  [2] Got: helloworld
  >>>

基于回调函数的软件通常都有可能变得非常复杂。一部分原因是回调函数通常会
跟请求执行代码断开。因此，请求执行和处理结果之间的执行环境实际上已经丢失了。
如果你想让回调函数连续执行多步操作，那你就必须去解决如何保存和恢复相关的状
态信息了。

至少有两种主要方式来捕获和保存状态信息，你可以在一个对象实例 (通过一个绑
定方法) 或者在一个闭包中保存它。两种方式相比，闭包或许是更加轻量级和自然一点，
因为它们可以很简单的通过函数来构造。它们还能自动捕获所有被使用到的变量。因
此，你无需去担心如何去存储额外的状态信息 (代码中自动判定)。

如果使用闭包，你需要注意对那些可修改变量的操作。在上面的方案中，nonlocal
声明语句用来指示接下来的变量会在回调函数中被修改。如果没有这个声明，代码会报
错

而使用一个协程来作为一个回调函数就更有趣了，它跟闭包方法密切相关。某种意
义上来讲，它显得更加简洁，因为总共就一个函数而已。并且，你可以很自由的修改变
量而无需去使用 nonlocal 声明。这种方式唯一缺点就是相对于其他 Python 技术而言
或许比较难以理解。另外还有一些比较难懂的部分，比如使用之前需要调用 next() ，
实际使用时这个步骤很容易被忘记。尽管如此，协程还有其他用处，比如作为一个内联
回调函数的定义

如果你仅仅只需要给回调函数传递额外的值的话，还有一种使用 partial() 的方
式也很有用。在没有使用 partial() 的时候，你可能经常看到下面这种使用 lambda 表
达式的复杂代码::

  >>> apply_async(add, (2, 3), callback=lambda r: handler(r, seq))
  [1] Got: 5
  >>>

内联回调函数
==========================

当你编写使用回调函数的代码的时候，担心很多小函数的扩张可能会弄乱程序控
制流。你希望找到某个方法来让代码看上去更像是一个普通的执行序列。

通过使用生成器和协程可以使得回调函数内联在某个函数中
假设你有如下所示的一个执行某种计算任务然后调用一个回调函数的函数::

  def apply_async(func, args, *, callback):
    # Compute the result
    result = func(*args)

    # Invoke the callback with the result
    callback(result)

接下来让我们看一下下面的代码，它包含了一个 Async 类和一个 inlined_async
装饰器::

  from queue import Queue
  from functools import wraps

  class Async:
    def __init__(self, func, args):
      self.func = func
      self.args = args

  def inlined_async(func):
    @wraps(func)
    def wrapper(*args):
      f = func(*args)
      result_queue = Queue()
      result_queue.put(None)
      while True:
        result = result_queue.get()
        try:
          a = f.send(result)
          apply_async(a.func, a.args, callback=result_queue.put)
        except StopIteration:
          break
    return wrapper

这两个代码片段允许你使用 yield 语句内联回调步骤。比如::

  def add(x, y):
    return x + y

  @inlined_async
  def test():
    r = yield Async(add, (2, 3))
    print(r)
    r = yield Async(add, ('hello', 'world'))
    print(r)
    for n in range(10):
      r = yield Async(add, (n, n))
      print(r)
    print('Goodbye')

如果你调用 test() ，你会得到类似如下的输出::

  5
  helloworld
  0
  2468
  10
  12
  14
  16
  18
  Goodbye

你会发现，除了那个特别的装饰器和 yield 语句外，其他地方并没有出现任何的
回调函数 (其实是在后台定义的)

关于回调函数、生成器和控制流

在需要使用到回调的代码中，关键点在于当前计算工作会挂起并在将来
的某个时候重启 (比如异步执行)。当计算重启时，回调函数被调用来继续处理结果。
apply_async() 函数演示了执行回调的实际逻辑，尽管实际情况中它可能会更加复杂
(包括线程、进程、事件处理器等等)。

计算的暂停与重启思路跟生成器函数的执行模型不谋而合。具体来讲，yield 操作
会使一个生成器函数产生一个值并暂停。接下来调用生成器的 __next__() 或 send()
方法又会让它从暂停处继续执行。

访问闭包中定义的变量
==========================

想要扩展函数中的某个闭包，允许它能访问和修改函数的内部变量

通常来讲，闭包的内部变量对于外界来讲是完全隐藏的。但是，你可以通过编写访
问函数并将其作为函数属性绑定到闭包上来实现这个目的。例如::

  def sample():
  n = 0
  # Closure function
  def func():
    print('n=', n)

  # Accessor methods for n
  def get_n():
    return n

  def set_n(value):
    nonlocal n
    n = value

  # Attach as function attributes
  func.get_n = get_n
  func.set_n = set_n
  return func

使用::

  >>> f = sample()
  >>> f()
  n= 0
  >>> f.set_n(10)
  >>> f()
  n= 10
  >>> f.get_n()
  10
  >>>

为了说明清楚它如何工作的，有两点需要解释一下。首先，nonlocal 声明可以让
我们编写函数来修改内部变量的值。其次，函数属性允许我们用一种很简单的方式将访
问方法绑定到闭包函数上，这个跟实例方法很像 (尽管并没有定义任何类)。

