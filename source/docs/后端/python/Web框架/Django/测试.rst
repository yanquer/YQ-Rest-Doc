==============================
测试
==============================

一份好的业务代码，是需要经过实际测试的。

一方面是自己确认代码运行正常，另一方面是对外提供测试信息。

编写方法
==============================

一般来说，Django的测试用例应该定义在应用的 tests.py 文件里。

系统会自动在以 tests 开头的文件里寻找并执行测试代码。

比如有一个 polls 的django应用，将以下代码写入 tests.py::

  import datetime

  from django.test import TestCase
  from django.utils import timezone

  from .models import Question


  class QuestionModelTests(TestCase):

      def test_was_published_recently_with_future_question(self):
          """
          was_published_recently() returns False for questions whose pub_date
          is in the future.
          """
          time = timezone.now() + datetime.timedelta(days=30)
          future_question = Question(pub_date=time)
          self.assertIs(future_question.was_published_recently(), False)

解读：
  创建一个 django.test.TestCase 的子类，并添加一个方法，
  此方法创建一个 pub_date 时未来某天的 `Question` 实例。
  然后检查它的 `was_published_recently()` 方法的返回值——它 *应该* 是 False。

运行测试
==============================

在终端中，我们通过输入以下代码运行测试::

  $ python manage.py test polls

你将会看到运行结果::

  Creating test database for alias 'default'...
  System check identified no issues (0 silenced).
  F
  ======================================================================
  FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)
  ----------------------------------------------------------------------
  Traceback (most recent call last):
    File "/path/to/mysite/polls/tests.py", line 16, in test_was_published_recently_with_future_question
      self.assertIs(future_question.was_published_recently(), False)
  AssertionError: True is not False

  ----------------------------------------------------------------------
  Ran 1 test in 0.001s

  FAILED (failures=1)
  Destroying test database for alias 'default'...

以下是自动化测试的运行过程：

- `python manage.py test polls` 将会寻找 `polls` 应用里的测试代码
- 它找到了 `django.test.TestCase <https://docs.djangoproject.com/zh-hans/3.2/topics/testing/tools/#django.test.TestCase>`_ 的一个子类
- 它创建一个特殊的数据库供测试使用
- 它在类中寻找测试方法——以 `test` 开头的方法。
- 在 `test_was_published_recently_with_future_question` 方法中，它创建了一个 `pub_date` 值为 30 天后的 `Question` 实例。
- 接着使用 `assertls()` 方法，发现 `was_published_recently()` 返回了 `True`，而我们期望它返回 `False`。

测试系统通知我们哪些测试样例失败了，和造成测试失败的代码所在的行号。


参考: `自动化测试简介 <https://docs.djangoproject.com/zh-hans/3.2/intro/tutorial05/>`_








