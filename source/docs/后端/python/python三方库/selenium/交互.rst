=======================
交互
=======================


.. post:: 2023-02-20 22:06:49
  :tags: python, python三方库, selenium
  :category: 后端
  :author: YanQue
  :location: CD
  :language: zh-cn


获取浏览器信息
=======================

获取标题
  从浏览器中读取当前页面的标题::

    driver.title

  获取当前 URL::

    driver.current_url

浏览器导航
=======================

启动浏览器后的第一件事就是打开网站::

  // 简便的方法
  driver.get("https://selenium.dev");

  // 更长的方法
  driver.navigate().to("https://selenium.dev");

按下浏览器的后退按钮::

  driver.navigate().back();

按下浏览器的前进键::

  driver.navigate().forward();

刷新页面::

  driver.navigate().refresh();

警告框
=======================

Alerts 警告框
  其中最基本的称为警告框, 它显示一条自定义消息, 以及一个用于关闭该警告的按钮,
  在大多数浏览器中标记为"确定"(OK).
  在大多数浏览器中, 也可以通过按"关闭"(close)按钮将其关闭, 但这始终与“确定”按钮具有相同的作用

  WebDriver可以从弹窗获取文本并接受或关闭这些警告.::

    # Click the link to activate the alert
    driver.find_element(By.LINK_TEXT, "See an example alert").click()

    # Wait for the alert to be displayed and store it in a variable
    alert = wait.until(expected_conditions.alert_is_present())

    # Store the alert text in a variable
    text = alert.text

    # Press the OK button
    alert.accept()
Confirm 确认框
  确认框类似于警告框, 不同之处在于用户还可以选择取消消息.
  此示例还呈现了警告的另一种实现::

    # Click the link to activate the alert
    driver.find_element(By.LINK_TEXT, "See a sample confirm").click()

    # Wait for the alert to be displayed
    wait.until(expected_conditions.alert_is_present())

    # Store the alert in a variable for reuse
    alert = driver.switch_to.alert

    # Store the alert text in a variable
    text = alert.text

    # Press the Cancel button
    alert.dismiss()
Prompt 提示框
  提示框与确认框相似, 不同之处在于它们还包括文本输入.
  与处理表单元素类似, 您可以使用WebDriver的sendKeys来填写响应.
  这将完全替换占位符文本. 按下取消按钮将不会提交任何文本::

    # Click the link to activate the alert
    driver.find_element(By.LINK_TEXT, "See a sample prompt").click()

    # Wait for the alert to be displayed
    wait.until(expected_conditions.alert_is_present())

    # Store the alert in a variable for reuse
    alert = Alert(driver)

    # Type your message
    alert.send_keys("Selenium")

    # Press the OK button
    alert.accept()

cookies
=======================

Cookie是从网站发送并存储在您的计算机中的一小段数据. Cookies主要用于识别用户并加载存储的信息.

WebDriver API提供了一种使用内置的方法与Cookie进行交互:

添加 Cookie
  这个方法常常用于将cookie添加到当前访问的上下文中. 添加Cookie仅接受一组已定义的可序列化JSON对象
  首先, 您需要位于有效Cookie的域上. 如果您在开始与网站进行交互之前尝试预设cookie,
  并且您的首页很大或需要一段时间才能加载完毕, 则可以选择在网站上找到一个较小的页面::

    from selenium import webdriver

    driver = webdriver.Chrome()

    driver.get("http://www.example.com")

    # Adds the cookie into current browser context
    driver.add_cookie({"name": "key", "value": "value"})
获取命名的 Cookie
  此方法返回与cookie名称匹配的序列化cookie数据中所有关联的cookie.::

    from selenium import webdriver

    driver = webdriver.Chrome()

    # Navigate to url
    driver.get("http://www.example.com")

    # Adds the cookie into current browser context
    driver.add_cookie({"name": "foo", "value": "bar"})

    # Get cookie details with named cookie 'foo'
    print(driver.get_cookie("foo"))

获取全部 Cookies
  此方法会针对当前访问上下文返回“成功的序列化cookie数据”.
  如果浏览器不再可用, 则返回错误.::

    from selenium import webdriver

    driver = webdriver.Chrome()

    # Navigate to url
    driver.get("http://www.example.com")

    driver.add_cookie({"name": "test1", "value": "cookie1"})
    driver.add_cookie({"name": "test2", "value": "cookie2"})

    # Get all available cookies
    print(driver.get_cookies())
删除 Cookie
  此方法删除与提供的cookie名称匹配的cookie数据.::

    from selenium import webdriver
    driver = webdriver.Chrome()

    # Navigate to url
    driver.get("http://www.example.com")
    driver.add_cookie({"name": "test1", "value": "cookie1"})
    driver.add_cookie({"name": "test2", "value": "cookie2"})

    # Delete a cookie with name 'test1'
    driver.delete_cookie("test1")
删除所有 Cookies
  此方法删除当前访问上下文的所有cookie.::

    from selenium import webdriver
    driver = webdriver.Chrome()

    # Navigate to url
    driver.get("http://www.example.com")
    driver.add_cookie({"name": "test1", "value": "cookie1"})
    driver.add_cookie({"name": "test2", "value": "cookie2"})

    #  Deletes all cookies
    driver.delete_all_cookies()
Same-Site Cookie属性
  此属性允许用户引导浏览器控制cookie, 是否与第三方站点发起的请求一起发送.
  引入其是为了防止CSRF（跨站请求伪造）攻击.

  Same-Site cookie属性接受以下两种参数作为指令:

  - Strict: 当sameSite属性设置为 Strict, cookie不会与来自第三方网站的请求一起发送.
  - Lax: 当您将cookie sameSite属性设置为 Lax, cookie将与第三方网站发起的GET请求一起发送.
    注意: 到目前为止, 此功能已在Chrome(80+版本), Firefox(79+版本)中提供, 并适用于Selenium 4以及更高版本.

  用例::

    from selenium import webdriver

    driver = webdriver.Chrome()

    driver.get("http://www.example.com")
    # Adds the cookie into current browser context with sameSite 'Strict' (or) 'Lax'
    driver.add_cookie({"name": "foo", "value": "value", 'sameSite': 'Strict'})
    driver.add_cookie({"name": "foo1", "value": "value", 'sameSite': 'Lax'})
    cookie1 = driver.get_cookie('foo')
    cookie2 = driver.get_cookie('foo1')
    print(cookie1)
    print(cookie2)

与IFrames和frames一起工作
==============================================

框架是一种现在已被弃用的方法，用于从同一域中的多个文档构建站点布局。
除非你使用的是 HTML5 之前的 webapp，否则你不太可能与他们合作。
内嵌框架允许插入来自完全不同领域的文档，并且仍然经常使用。

如果您需要使用框架或 iframe, WebDriver 允许您以相同的方式使用它们。
考虑 iframe 中的一个按钮。 如果我们使用浏览器开发工具检查元素，我们可能会看到以下内容::

  <div id="modal">
    <iframe id="buttonframe"name="myframe"src="https://seleniumhq.github.io">
    <button>Click here</button>
  </iframe>
  </div>

如果不是 iframe，我们可能会使用如下方式点击按钮::

  // 这不会工作
  driver.find_element(By.TAG_NAME, 'button').click()

但是，如果 iframe 之外没有按钮，那么您可能会得到一个 no such element 无此元素 的错误。
这是因为 Selenium 只知道顶层文档中的元素。
为了与按钮进行交互，我们需要首先 **切换到框架**， 这与切换窗口的方式类似。

WebDriver 提供了三种切换到帧的方法。

使用 WebElement
  使用 WebElement 进行切换是最灵活的选择::

        # 存储网页元素
    iframe = driver.find_element(By.CSS_SELECTOR, "#modal > iframe")

        # 切换到选择的 iframe
    driver.switch_to.frame(iframe)

        # 单击按钮
    driver.find_element(By.TAG_NAME, 'button').click()
使用 name 或 id
  如果您的 frame 或 iframe 具有 id 或 name 属性，则可以使用该属性。
  如果名称或 id 在页面上不是唯一的， 那么将切换到找到的第一个。::

        # 通过 id 切换框架
    driver.switch_to.frame('buttonframe')

        # 单击按钮
    driver.find_element(By.TAG_NAME, 'button').click()
使用索引
  还可以使用frame的索引， 例如可以使用JavaScript中的 window.frames 进行查询.::

        # 基于索引切换到第 2 个 iframe
    iframe = driver.find_elements(By.TAG_NAME,'iframe')[1]

        # 切换到选择的 iframe
    driver.switch_to.frame(iframe)
离开框架
  离开 iframe 或 frameset，切换回默认内容，如下所示::

        # 切回到默认内容
    driver.switch_to.default_content()

同窗口和标签一起工作
=======================

参考: https://www.selenium.dev/zh-cn/documentation/webdriver/interactions/windows/

窗口切换/关闭, 屏幕截图, 执行脚本

虚拟身份验证器
=======================

参考: https://www.selenium.dev/zh-cn/documentation/webdriver/interactions/virtual_authenticator/








