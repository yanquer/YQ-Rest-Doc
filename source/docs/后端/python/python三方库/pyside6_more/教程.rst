===================
教程
===================

基本说明见: :doc:`/docs/后端/python/python三方库/pyside6_more/index`

Widgets说明
===================

控件示例参考: `gallery <https://doc.qt.io/qt-6/gallery.html>`_

常用控件:

- QPushButton, 可点击的按钮
- QLabel, 标签控件
- QLineEdit, 行编辑框

创建应用程序都需要先导入 ``QApplication`` ::

  from PySide6.QtWidgets import QApplication, QLabel

  app = QApplication([])

  # do something
  # QLabel 参数除了是纯文本, 还可以是 HTML
  label = QLabel("<font color=red size=40>Hello World!</font>")

  app.exec()

当 ``QApplication`` 不需要参数时, 就给空列表即可, 需要命令行参数就写 ``sys .argv``

信号-槽 机制
===================

Signals and Slots

:官网::
  `Signals and Slots <https://doc.qt.io/qtforpython/tutorials/basictutorial/signals_and_slots.html>`_

用于控件之间的通信, 类似于回调函数, Qt 的核心功能

- 当控件对象发生状态改变时, 信号由控件对象发出 (官网说是真正的对象封装?)
- 槽用于接收信号
- 信号也可直接连接到另一个信号, 相当于两个信号同时发生(一个信号发生时, 会立即出发另一个信号, 不论第一个信号发生是否完毕)
- Qt 内部也预定于了一些槽, 比如 ``QLineEdit`` 的 ``clear`` 方法
- 信号与槽的连接使用 ``connect`` , 返回 ``QMetaObject.Connection`` 对象,
  解绑使用这个返回对象的 ``disconnect()`` 方法

可用于减少依赖,
解偶?
但是个人觉得, 使用 ``connet`` 连接信号和槽的时候还是知道了自己连接了哪个, 只是不知道之后连接的的哪个槽会做出哪些操作,
感觉不算完全结偶

槽 Slot 使用装饰器::

  from PySide6.QtCore import Slot

  @Slot()
  def fun():
    pass

使用控件的 ``connect`` 连接到槽, ``clicked`` 就是信号::

  # Create a button
  button = QPushButton("Click me")

  # Connect the button to the function
  button.clicked.connect(fun)

显示控件::

  # Show the button
  button.show()

.. note::

  其实普通的类似这样的函数定义(无参数的函数定义), 加不加 @Slot 的装饰器实际测试没什么差别, 但是迄今为止还没找到一个合适的说法.

  比如? 为什么普通的函数需要加 @Slot 注解? 什么时候起作用? 等等.

  官网只有一句这个: **Signals can also be connected to free functions**

  这里没动 free functions 是啥意思, 官网给的例子像是说 外部定义的自由函数? 但是个人觉得应该也包含无参数方法吧.

拓展说明

Signals
------------------

自定义信号, 可传入不同的类型::

  from PySide6.QtCore import Signal

Python 类型::

  signal1 = Signal(int)  # Python types

Qt 类型::

  signal2 = Signal(QUrl)  # Qt Types

多个参数::

  signal3 = Signal(int, str, int)  # more than one type

可选参数::

  signal4 = Signal((float,), (QDate,))  # optional types

Signal 可接受的关键词参数:

name: str
  表示这个槽的名称, 若没指定, 则使用变量名
arguments: list
  可用于 QML 应用, 表示按照名称引用发射值

  如::

    sumResult = Signal(int, arguments=['sum'])

  QML::

    Connections {
        target: ...
        function onSumResult(sum) {
            // do something with 'sum'
        }


Slot
------------------

与信号类似, 支持传入类型::

  @Slot(str)
  def slot_function(self, s):
      ...

可接受的关键字参数:

name: str
  槽名称, 未指定则为函数名
result:
  返回类型, 可以是 Python 类型, 也可以是 C 类型

不同类型的超载信号与槽
------------------------------------

即一个信号可接受可变类型参数, 如可接受 int 与 str 类型::

  Signal((int,), (str,))

列官网例子::

  import sys
  from PySide6.QtWidgets import QApplication, QPushButton
  from PySide6.QtCore import QObject, Signal, Slot

  class Communicate(QObject):
      # create two new signals on the fly: one will handle
      # int type, the other will handle strings
      speak = Signal((int,), (str,))

      def __init__(self, parent=None):
          super().__init__(parent)

          self.speak[int].connect(self.say_something)
          self.speak[str].connect(self.say_something)

      # define a new slot that receives a C 'int' or a 'str'
      # and has 'say_something' as its name
      @Slot(int)
      @Slot(str)
      def say_something(self, arg):
          if isinstance(arg, int):
              print("This is a number:", arg)
          elif isinstance(arg, str):
              print("This is a string:", arg)

  if __name__ == "__main__":
      app = QApplication(sys.argv)
      someone = Communicate()

      # emit 'speak' signal with different arguments.
      # we have to specify the str as int is the default
      someone.speak.emit(10)
      someone.speak[str].emit("Hello everybody!")

控件布局
===================

布局 相关控件:

- QHBoxLayout, 水平布局(从左到右)
- QVBoxLayout, 垂直布局(从上到下)
- QGridLayout, 格子布局
- QFormLayout, 只有两列的格子布局

设置一个水平布局::

  self._layout = QHBoxLayout(self)

布局内加入两个控件, 控件水平方向占比为 **1:4** ::

  self._layout.addWidget(self._m_left_side_window, 1)
  self._layout.addWidget(self._m_main_window, 4)

与以下代码效果一致::

  self._layout.addWidget(self._m_left_side_window, )
  self._layout.addWidget(self._m_main_window, )
  self._layout.setStretchFactor(self._m_left_side_window, 1)
  self._layout.setStretchFactor(self._m_main_window, 4)

有时有设置控件布局的需求::

  # xx_widget.setLayout(self._layout)
  self.setLayout(self._layout)

**使用 ``resize(width, heigth)`` 与 使用布局控件如 ``QVBoxLayout`` 垂直布局是冲突的**

- ``resize(width, heigth)`` 表示自定义窗体大小,
  这个时候是需要自己进行手动布局的, 且需要手动执行 ``show()`` 才可以显示控件
- 使用布局控件, 布局控件会自动帮你调整其内容大小, 只有最顶层的需要调用 ``show()`` ,
  需要注意的是, 其下如果有控件没放到布局内部, 还是需要手动 show
- addStretch(), 填充一个空白位置

显示表格数据的两个控件
======================================

- QTableWidget 搭配 QTableWidgetItem(表示每一个单元格) 使用, 简单一点, 但是大数据时候不卡
- QTableView 复杂一点, 大数据流畅

QTableWidget 部分方法:

.. function:: setRowCount(row: int)

  设置表格行数

.. function:: setColumnCount(column: int)

  设置表格列数

setHorizontalHeaderLabels 设置表格头, 参数为 str或者list类型

展示/更新颜色控件
===================

QColor

一些基本颜色与对应16进制::

  colors = [("Red", "#FF0000"),
            ("Green", "#00FF00"),
            ("Blue", "#0000FF"),
            ("Black", "#000000"),
            ("White", "#FFFFFF"),
            ("Electric Green", "#41CD52"),
            ("Dark Blue", "#222840"),
            ("Yellow", "#F9E56d")]

树控件
===================

- QTreeWidget, 与 QTreeWidgetItem 协作
- QTreeView

图表控件
===================

- QPieSeries, 饼状图
- QLineSeries, 折线图
- QChart
- QChartView

可参考例子: `Expenses Tool Tutorial <https://doc.qt.io/qtforpython/tutorials/expenses/expenses.html>`_

异步编程
===================

- trio 模块


ui 文件配置
===================

感觉没有手写方便, 先略过

qrc 文件配置
===================

``.qrc`` 是用来配置二进制资源文件的, 通过此文件加载响应的资源文件如字体, 图标, 然后使用 控件 如: QFile, QIcon

一个图标qrc文件 icons.qrc::

  </ui>
  <!DOCTYPE RCC><RCC version="1.0">
  <qresource>
      <file>icons/play.png</file>
      <file>icons/pause.png</file>
      <file>icons/stop.png</file>
      <file>icons/previous.png</file>
      <file>icons/forward.png</file>
  </qresource>
  </RCC>

使用 ``pyside6-rcc`` 转换为 Python 文件::

  pyside6-rcc icons.rc -o rc_icons.py

原来代码::

  from PySide6.QtGui import QIcon, QKeySequence
  playIcon = self.style().standardIcon(QStyle.SP_MediaPlay)

修改后的代码::

  from PySide6.QtGui import QIcon, QKeySequence, QPixmap
  playIcon = QIcon(QPixmap(":/icons/play.png"))

多语言支持
===================

Qt Linguist
-------------------

官网称做: ``Qt Linguist``

见: `translations <https://doc.qt.io/qtforpython/tutorials/basictutorial/translations.html>`_

使用 ``self.tr()`` ::

  count = len(self._list_widget.selectionModel().selectedRows())
  message = self.tr("%n language(s) selected", "", count)

翻译文件为基于 XML 的 ``.ts`` 文件, 通过 **lupdate** 提取::

  pyside6-lupdate main.py main.qml form.ui -ts example_de.ts

文件已存在则为更新模式.

转换为二进制的 ``.qm`` 文件::

  mkdir translations
  pyside6-lrelease example_de.ts -qm translations/example_de.qm

建议通过 ``.qrc`` 文件来使用::

  <!DOCTYPE RCC><RCC version="1.0">
  <qresource>
      <file>translations/example_de.qm</file>
  </qresource>
  </RCC>

代码中路径形式::

  :/translations/example_de.qm

代码中通过 **QTranslator** 来加载::

  path = QLibraryInfo.location(QLibraryInfo.TranslationsPath)
  translator = QTranslator(app)
  if translator.load(QLocale.system(), 'qtbase', '_', path):
      app.installTranslator(translator)
  translator = QTranslator(app)
  path = ':/translations'
  if translator.load(QLocale.system(), 'example', '_', path):
      app.installTranslator(translator)

第一次加载 Qt 的翻译, 第二次加载资源文件的翻译.

可通过以下方式运行::

  LANG=de python main.py

.. 这里没咋懂 de 哪定义的, 后面写个例子再看吧

GNU gettext
-------------------

相关可参考 :doc:`/docs/后端/python/python标准库/gettext`

例子,

**最顶部定义** ::

  import gettext
  ...
  _ = None
  ngettext = None

**翻译部分定义** ::

  src_dir = Path(__file__).resolve().parent
  try:
      translation = gettext.translation('example', localedir=src_dir / 'locales')
      if translation:
          translation.install()
          _ = translation.gettext
          ngettext = translation.ngettext
  except FileNotFoundError:
      pass
  if not _:
      _ = gettext.gettext
      ngettext = gettext.ngettext

将会找 **locales** 下的 **example**

**使用** ::

  file_menu = self.menuBar().addMenu(_("&File"))

转换 ``.pot`` 文件::

  mkdir -p locales/de_DE/LC_MESSAGES
  xgettext -L Python -o locales/example.pot main.py

文件头大概如下::

  "Project-Id-Version: PySide6 gettext example\n"
  "POT-Creation-Date: 2021-07-05 14:16+0200\n"
  "Language: de_DE\n"
  "MIME-Version: 1.0\n"
  "Content-Type: text/plain; charset=UTF-8\n"
  "Content-Transfer-Encoding: 8bit\n"
  "Plural-Forms: nplurals=2; plural=n != 1;\n"

翻译内容大概如下::

  #: main.py:57
  msgid "&File"
  msgstr "&Datei"

转换为 ``.mo`` 翻译文件::

  msgfmt -o example.mo example.pot

运行::

  LANG=de python main.py

控件样式
===================

默认使用当前平台系统的主题.
也可自定义样式

自定义方式:

- 使用 Qt 提供的部分样式,
  如::

    w = QLabel("This is a placeholder text")
    w.setAlignment(Qt.AlignCenter)
- 类 CSS 语法,
  如::

    w.setStyleSheet("""
        background-color: #262626;
        color: #FFFFFF;
        font-family: Titillium;
        font-size: 18px;
        """)

  多个类 CSS 样式可以使用 ``.qss`` 文件

  .. note::

    使用字体需要先安装. 可以使用 **QFontDatabase** 查看已安装字体, 使用 families() 指定.

``.qss`` 文件说明: 与 CSS 文件基本是一致的, 不过可以直接使用控件类名来指定样式::

  QLabel {
      background-color: red;
  }

也可以设置控件类对象的名称, 如::

  QLabel#title {
      font-size: 20px;
  }

而对于某些预定义控件下的控件, 如 **QListWidget** 下的 **QListWidgetItem** ::

  QListWidget::item {
      height: 50px;
  }

同样的, 选中状态定义::

  QListWidget::item:selected {
      background-color: #2ABf9E;
      qproperty-alignment: AlignCenter;
  }

代码中这样定义::

  label = QLabel(“Test”)
  label.setObjectName(“title”)

使用自定义的样式文件, 使用 **setStyleSheet** ::

  if __name__ == "__main__":
    app = QApplication()

    w = Widget()
    w.show()

    with open("style.qss", "r") as f:
        _style = f.read()
        app.setStyleSheet(_style)

    sys.exit(app.exec())

这样设计可以很好的去 **解耦**

移植 C++ 应用到 Python Qt
===============================

称 **重写** 更贴切.

参考: `Porting a C++ Application to Python <https://doc.qt.io/qtforpython/tutorials/portingguide/index.html>`_

