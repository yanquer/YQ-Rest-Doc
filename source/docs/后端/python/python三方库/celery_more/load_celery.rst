=======================
celery加载流程与懒加载
=======================

程序是懒加载的，在没有实际使用的情况下，是不会进行加载的。 创建一个 Celery 程序的流程如下:

- 创建用于事件的逻辑时钟实例
- 创建任务注册表
- 将自身设置为当前应用程序（如果禁用 set_as_current 参数则不会）
- 调用 app.on_init() 回调函数(默认情况下不执行任何操作)
  app.task() 装饰器不会在定义任务时创建任务，创建任务通常在使用该任务或应用程序完成后进行创建。

举例说明，在使用任务或访问属性之前，是如何创建任务的::

  >>> @app.task
  >>> def add(x, y):
  ...    return x + y

  >>> type(add)
  <class 'celery.local.PromiseProxy'>

  >>> add.__evaluated__()
  False

  >>> add        # <-- causes repr(add) to happen
  <@task: __main__.add>

  >>> add.__evaluated__()
  True

应用程序的终结可以通过调用 app.finalize() 显式执行，也可以通过访问 app.tasks 属性隐式执行。
完成创建对象将:

- 复制必须在应用之间共享的任务
  默认情况下共享任务，如果设置装饰器的 shared 参数，该任务为私有任务。
- 评估所有待处理的任务装饰器
- 确保当前所有的人呢我都已经绑定到当前应用程序
  任务绑带到应用程序，便于从配置中获取配置信息。






