=====================
多线程
=====================


.. post:: 2023-02-20 22:08:48
  :tags: python, 概念相关
  :category: 后端
  :author: YanQue
  :location: CD
  :language: zh-cn


线程是进程的子任务，cpu调度和分配的基本单位，实现进程内并发。

启动一个新线程可使用 :doc:`/docs/后端/python/python标准库/threading` 模块

线程同步技术：

解决多个线程争抢同一个资源的情况，线程协作工作。一份数据同一时刻只能有一个线程处理。

解决线程同步的几种方法::

  Lock、RLock、Condition、Barrier、semaphore

线程间通信
=====================

- 互斥量_ :  通过互斥机制防止多个线程同时访问公共资源。
- 信号量（Semphare）:  控制同一时刻多个线程访问同一个资源的线程数。 ps: python的threading 文档
- 事件（信号）:  通过通知的方式保持多个线程的同步。

互斥量
---------------------

互斥锁(mutex)/互斥量 python

Linux中提供一把互斥锁mutex（也称之为互斥量）

使用, threading模块中定义了Lock变量，这个变量本质上是一个函数，通过调用这个函数可以获取一把互斥锁::

  # 创建锁
  mutex = threading.Lock()

  # 上锁
  mutex.acquire()

  # 这里编写代码能保证同一时刻只能有一个线程去操作, 对共享数据进行锁定...

  # 释放锁
  mutex.release()

Python重互斥量的实现有以下几种形式

- threading.Condition() :
  Condition对象提供了wait()、notify()和notify_all()等方法，可以用于控制多个线程的执行。在多个线程共享一个变量时，可以使用Condition对象来确保多个线程按照特定的顺序访问共享变量。

  总体上包含了一个Lock对象和一个wait set。
  该对象主要提供了以下三个方法:

  - wait():释放内部锁并阻塞线程,将线程加入到wait set中。
  - notify():唤醒 wait set 中的一个线程。
  - notify_all():唤醒 wait set 中的所有线程。

  notify()和notify_all()的区别在于:

  - notify()只会唤醒wait set中的一个线程,并将其从wait set中移除。其余线程仍然阻塞。
  - notify_all()会唤醒wait set中的所有线程,并将它们全部从wait set中移除。

- threading.Semaphore() :
  计数信号量, 它允许多个线程同时访问共享资源，但需要限制同时访问该资源的线程数量。
  Semaphore对象包含一个计数器，每当一个线程访问共享资源时，该计数器就会减1。当计数器为0时，其它线程将被阻塞。
- threading.Event() :
  线程同步工具，用于线程间通信。它包含一个标志，可以通过set()和clear()方法设置或清除。当一个线程调用set()方法时，其他线程可以通过wait()方法等待该事件发生。
- queue.Queue() : 线程安全的先进先出队列, 底层还是锁机制

