===============================
Python下进程与线程
===============================

进程和线程的区别
===============================

- 进程是对运行时程序的封装，是系统资源调度和分配的基本单位
- 线程是进程的子任务，cpu调度和分配的基本单位，实现进程内并发。
- 一个进程可以包含多个线程，线程依赖进程存在，并共享进程内存

线程安全
===============================

- 一个操作可以在多线程环境中使用，并且获得正确的结果。
- 线程安全的操作线程是顺序执行的而不是并发执行的。
- 一般涉及到写操作需要考虑如何让多个线程安全访问数据。

线程间通信
===============================

- 互斥量（锁）:  通过互斥机制防止多个线程同时访问公共资源。
- 信号量（Semphare）:  控制同一时刻多个线程访问同一个资源的线程数。 ps: python的threading 文档
- 事件（信号）:  通过通知的方式保持多个线程的同步。

进程间通信
===============================

IPC: Inter-Process Communication 进程间传递信号或者数据

- 管道/匿名管道/有名管道（pipe）
- 信号（Signal）: 比如用户使用ctrl+c产生SIGINT程序终止信号
- 消息队列（Message）
- 共享内存（share memory）
- 进程间的信号量（Semaphore）
- 套接字（socket）: 最常用的方式，我们的web应用就是这种方式

详细介绍
===============================

.. .. toctree\:\:

..   多进程
..   多线程

- :doc:`/docs/后端/python/概念相关/多线程`
- :doc:`/docs/后端/python/概念相关/多进程`

Can't pickle local object
===============================

使用多线/进程时, 一般都是使用的 :doc:`/docs/后端/python/python标准库/multiprocessing` 模块(或者多线程的).

其内部进行数据传输时, 会将数据序列化处理. 其内部源码使用的是 ``pickle`` 模块.

但是这个模块又不能对局部函数, lambda 函数进行序列化, 所以容易产生这样的报错::

  Can't pickle local object xxxx

可以从两种角度来解决:

- 编码时候不使用 lambda 函数/局部函数(闭包), 这个此处不做说明, 更新一下结构就行了
- 使用其他方式进行数据/对象的序列化, 或者直接使用其他模块

其他序列化方式
--------------------------------

- dill_

dill
++++++++++++++

安装::

  pip install dill

使用::

  import dill

  obj = SomeClass()
  data = dill.dumps(obj)
  obj = dill.loads(data)


其他模块
--------------------------------

pathos.multiprocessing::

  from pathos.multiprocessing import ProcessingPool as Pool


