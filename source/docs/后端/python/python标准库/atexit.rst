=============================
atexit
=============================

官网: https://docs.python.org/zh-cn/3/library/atexit.html

退出处理器, 更正确一点来说, 是程序正常退出时候的退出处理器.

atexit 模块定义了清理函数的注册和反注册函数.
被注册的函数会在解释器正常终止时执行. atexit 会按照注册顺序的*逆序*执行;
如果你注册了 A, B 和 C, 那么在解释器终止时会依序执行 C, B, A.

.. note::

  通过该模块注册的函数, 在程序被未被 Python 捕获的信号杀死时并不会执行,
  在检测到 Python 内部致命错误以及调用了 os._exit() 时也不会执行.

提供的两个api

.. function:: atexit.register(func, *args, **kwargs)

  将 func 注册为终止时执行的函数.
  任何传给 func 的可选的参数都应当作为参数传给 register().
  可以多次注册同样的函数及参数.

  在正常的程序终止时 (举例来说, 当调用了 sys.exit() 或是主模块的执行完成时),
  所有注册过的函数都会以后进先出的顺序执行.
  这样做是假定更底层的模块通常会比高层模块更早引入, 因此需要更晚清理.

  如果在 exit 处理句柄执行期间引发了异常，
  将会打印回溯信息 (除非引发的是 SystemExit) 并且异常信息会被保存。
  在所有 exit 处理句柄都获得运行机会之后，所引发的最后一个异常会被重新引发。

  这个函数返回 func 对象，可以把它当作装饰器使用。但只有在函数不需要任何参数调用时才能工作.

.. function:: atexit.unregister(func)

  将 func 移出当解释器关闭时要运行的函数列表。
  如果 func 之前未被注册则 unregister() 将静默地不做任何事。
  如果 func 已被注册一次以上，则该函数每次在 atexit 调用栈中的出现都将被移除。
  当取消注册时会在内部使用相等性比较 (==)，因而函数引用不需要具有匹配的标识号。

