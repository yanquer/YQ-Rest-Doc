==================
weakref
==================

弱引用

官网: https://docs.python.org/zh-cn/3/library/weakref.html

weakref 模块允许Python程序员创建对象的 weak references 。

在下文中，术语 referent 表示由弱引用引用的对象。

对对象的弱引用不能保证对象存活：当对像的引用只剩弱引用时， garbage collection 可以销毁引用并将其内存重用于其他内容。
但是，在实际销毁对象之前，即使没有强引用，弱引用也一直能返回该对象。

弱引用的主要用途是实现保存大对象的高速缓存或映射，但又不希望大对象仅仅因为它出现在高速缓存或映射中而保持存活。

最常用:

.. function:: class weakref.ref(object[, callback])

  返回对 对象 的弱引用。如果原始对象仍然存活，则可以通过调用引用对象来检索原始对象；
  如果引用的原始对象不再存在，则调用引用对象将得到 None 。
  如果提供了 回调 而且值不是 None ，并且返回的弱引用对象仍然存活，则在对象即将终结时将调用回调;
  弱引用对象将作为回调的唯一参数传递；指示物将不再可用。

  许多弱引用也允许针对相同对象来构建。 为每个弱引用注册的回调将按从最近注册的回调到最早注册的回调的顺序被调用。

  回调所引发的异常将记录于标准错误输出，但无法被传播；它们会按与对象的 __del__() 方法所引发的异常相同的方式被处理。

  如果 object 可哈希，则弱引用也为 hashable。
  即使在 object 被删除之后它们仍将保持其哈希值。
  如果 hash() 在 object 被删除之后才首次被调用，则该调用将引发 TypeError。

  弱引用支持相等检测，但不支持排序比较。
  如果被引用对象仍然存在，两个引用具有与它们的被引用对象一致的相等关系（无论 callback 是否相同）。
  如果删除了任一被引用对象，则仅在两个引用对象为同一对象时两者才相等。

  这是一个可子类化的类型而非一个工厂函数。

  __callback__
  这个只读属性会返回当前关联到弱引用的回调。 如果回调不存在或弱引用的被引用对象已不存在，则此属性的值为 None。
  在 3.4 版更改: 添加了 __callback__ 属性。


