==================
time
==================

- 官网: https://docs.python.org/zh-cn/3/library/time.html
- 参考: `python time模块 <https://blog.csdn.net/you_are_my_dream/article/details/61616465>`_

常用::

  strptime
  #p表示parse，表示分析的意思，所以strptime是给定一个时间字符串和分析模式，返回一个时间对象。

  strftime
  #f表示format，表示格式化，和strptime正好相反，要求给一个时间对象和输出格式，返回一个时间字符串

  #获取当前时间戳
  timestamp = int(time.time())
  #格式化时间戳为本地的时间元组
  timeArray = time.localtime(timestamp)
  #格式化时间为目标格式字符串
  timeStr = time.strftime('%Y-%m-%d %H:%N:%S', timeArray)
  #根据指定的格式把一个时间字符串解析为时间元组
  timeArray2 = time.strptime(timeStr, '%Y-%m-%d %H:%N:%S')
  #转换为时间戳
  timestamp2 = int(time.mktime(timeArray2))

概述
==================

**strptime** , p表示parse，表示分析的意思，所以strptime是给定一个时间字符串和分析模式，返回一个时间对象。

**strftime** , f表示format，表示格式化，和strptime正好相反，要求给一个时间对象和输出格式，返回一个时间字符串

获取当前时间戳::

  timestamp = int(time.time())

格式化时间戳为本地的时间元组::

  timeArray = time.localtime(timestamp)

格式化时间为目标格式字符串::

  timeStr = time.strftime('%Y-%m-%d %H:%N:%S', timeArray)

根据指定的格式把一个时间字符串解析为时间元组::

  timeArray2 = time.strptime(timeStr, '%Y-%m-%d %H:%N:%S')

转换为时间戳::

  timestamp2 = int(time.mktime(timeArray2))

说明
==================

在Python中，通常有这几种方式来表示时间:

#. 时间戳
#. 格式化的时间字符串
#. 元组（struct_time）, 共九个元素。由于Python的time模块实现主要调用C库，所以各个平台可能有所不同。

时间说明:

- UTC（Coordinated Universal Time，世界协调时）亦即格林威治天文时间，世界标准时间。
  在中国为UTC+8。DST（Daylight Saving Time）即夏令时。
- 时间戳（timestamp）的方式.
  通常来说，时间戳表示的是从 **1970年1月1日00:00:00** 开始按秒计算的偏移量。
  我们运行 ``type(time.time())``, 返回的是float类型。
  返回时间戳方式的函数主要有time()，clock()等。
- 元组（struct_time）方式.
  struct_time元组共有9个元素，返回 struct_time 的函数主要有gmtime()，localtime()，strptime()。
  下面列出这种方式元组中的几个元素:

  +---------------+---------------------------+--------------------+
  | 索引(Index)   | 属性(Attribute)           | 值(Values)         |
  +===============+===========================+====================+
  | 0             | tm_year（年）             | 比如2011           |
  +---------------+---------------------------+--------------------+
  | 1             | tm_mon（月）              | 1 - 12             |
  +---------------+---------------------------+--------------------+
  | 2             | tm_mday（日）             | 1 - 31             |
  +---------------+---------------------------+--------------------+
  | 3             | tm_hour（时）             | 0 - 23             |
  +---------------+---------------------------+--------------------+
  | 4             | tm_min（分）              | 0 - 59             |
  +---------------+---------------------------+--------------------+
  | 5             | tm_sec（秒）              | 0 - 61             |
  +---------------+---------------------------+--------------------+
  | 6             | tm_wday (weekday)         | 0 - 6 (0表示周日)  |
  +---------------+---------------------------+--------------------+
  | 7             | tm_yday（一年中的第几天） | 1 - 366            |
  +---------------+---------------------------+--------------------+
  | 8             | tm_isdst（是否是夏令时）  | 默认为-1           |
  +---------------+---------------------------+--------------------+

python 提供的函数大概可以完成如下转换::



                                  time.ctime([secs])
                --------------------------------------------------------->

                time.mktime(t)                 time.strftime(format[, t])
               <---------------                 ----------------------->
  ===============                 ===============                           ==============
  | time.time() |                 | struct_time |                           | 时间字符串  |
  | 时间戳       |                 ===============                           ==============
  ===============
               --------------->                 <-----------------------
            time.localtime([secs])            time.strptime(string[, format])

              time.gmtime([secs])                 time.asctime([t])
               --------------->                 ----------------------->
                将事件戳转换为                 ‘Sun Jun 20 23:21:05 1993’
          UTC时区（0时区）的struct_time          转换为此种字符串形式

  -----------------
  |               |
  | time.sleep(s) |
  | 线程暂停运行    |
  |    s 秒       |
  -----------------

提供的函数
==================

time.mktime
------------------

.. function:: time.mktime(t)

  返回用秒数来表示时间的浮点数

  t:
    结构化的时间或者完整的9位元组元素

  将一个struct_time（元组形式的时间）转化为时间戳。

  time mktime() 函数执行与gmtime(), localtime()相反的操作，
  它接收struct_time对象作为参数，返回用秒数来表示时间的浮点数。

  如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。

实例::

  #!/usr/bin/python
  import time

  t = (2009, 2, 17, 17, 3, 38, 1, 48, 0)
  secs = time.mktime( t )
  print "time.mktime(t) : %f" %  secs
  print "asctime(localtime(secs)): %s" % time.asctime(time.localtime(secs))

结果::

  time.mktime(t) : 1234915418.000000
  asctime(localtime(secs)): Tue Feb 17 17:03:38 2009

time.time
------------------

.. function:: time.time()

  返回当前时间的时间戳（1970年开始的秒数）

  时间戳（timestamp）的方式：
  通常来说，时间戳表示的是从 **1970年1月1日00:00:00** 开始按秒计算的偏移量。
  我们运行“type(time.time())”，返回的是float类型。返回时间戳方式的函数主要有time()，clock()等。

time.localtime
------------------

.. function:: time.localtime([secs])

  将一个时间戳转换为当前时区的struct_time。secs参数未提供，则以当前时间为准。

例::

  >>> time.localtime()
  time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=14, tm_min=14, tm_sec=50, tm_wday=3, tm_yday=125, tm_isdst=0)
  >>> time.localtime(1304575584.1361799)
  time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=14, tm_min=6, tm_sec=24, tm_wday=3, tm_yday=125, tm_isdst=0)

time.gmtime
------------------

.. function:: time.gmtime([secs])

  和 localtime() 方法类似，gmtime() 方法是将一个时间戳转换为UTC时区（0时区）的struct_time。

例::

  >>>time.gmtime()
  time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=6, tm_min=19, tm_sec=48, tm_wday=3, tm_yday=125, tm_isdst=0)

time.sleep
------------------

.. function:: time.sleep(secs)

  线程推迟指定的时间运行。单位为秒。

time.clock
------------------

.. function:: time.clock()

  这个需要注意，在不同的系统上含义不同。

  在UNIX系统上，它返回的是“进程时间”，它是用秒表示的浮点数（时间戳）。

  而在WINDOWS中，第一次调用，返回的是进程运行的实际时间。
  而第二次之后的调用是自第一次调用以后到现在的运行时间。
  （实际上是以WIN32上 QueryPerformanceCounter() 为基础，它比毫秒表示更为精确）

time.asctime
------------------

.. function:: time.asctime([t])

  把一个表示时间的元组或者struct_time表示为这种形式： **'Sun Jun 20 23:21:05 1993'** .

  如果没有参数，将会将time.localtime()作为参数传入。

例::

  >>> time.asctime()
  'Thu May 5 14:55:43 2011'

time.ctime
------------------

.. function:: time.ctime([secs])

  把一个时间戳（按秒计算的浮点数）转化为time.asctime()的形式。

  如果参数未给或者为None的时候，将会默认time.time()为参数。
  它的作用相当于time.asctime(time.localtime(secs))。

例::

  >>> time.ctime()
  'Thu May 5 14:58:09 2011'
  >>> time.ctime(time.time())
  'Thu May 5 14:58:39 2011'
  >>> time.ctime(1304579615)
  'Thu May 5 15:13:35 2011'

time.strftime
------------------

.. function:: time.strftime(format[, t])

  把一个代表时间的元组或者struct_time（如由time.localtime()和time.gmtime()返回）转化为格式化的时间字符串。
  如果t未指定，将传入time.localtime()。
  如果元组中任何一个元素越界，ValueError的错误将会被抛出。

  +------+--------------------------------------------------------------+------+
  | 格式 | 含义                                                         | 备注 |
  +======+==============================================================+======+
  | %a   | 本地（locale）简化星期名称                                   |      |
  +------+--------------------------------------------------------------+------+
  | %A   | 本地完整星期名称                                             |      |
  +------+--------------------------------------------------------------+------+
  | %b   | 本地简化月份名称                                             |      |
  +------+--------------------------------------------------------------+------+
  | %B   | 本地完整月份名称                                             |      |
  +------+--------------------------------------------------------------+------+
  | %c   | 本地相应的日期和时间表示                                     |      |
  +------+--------------------------------------------------------------+------+
  | %d   | 一个月中的第几天（01 - 31）                                  |      |
  +------+--------------------------------------------------------------+------+
  | %H   | 一天中的第几个小时（24小时制，00 - 23）                      |      |
  +------+--------------------------------------------------------------+------+
  | %I   | 第几个小时（12小时制，01 - 12）                              |      |
  +------+--------------------------------------------------------------+------+
  | %j   | 一年中的第几天（001 - 366）                                  |      |
  +------+--------------------------------------------------------------+------+
  | %m   | 月份（01 - 12）                                              |      |
  +------+--------------------------------------------------------------+------+
  | %M   | 分钟数（00 - 59）                                            |      |
  +------+--------------------------------------------------------------+------+
  | %p   | 本地am或者pm的相应符                                         | 一   |
  +------+--------------------------------------------------------------+------+
  | %S   | 秒（01 - 61）                                                | 二   |
  +------+--------------------------------------------------------------+------+
  | %U   | 一年中的星期数。（00 - 53星期天是一个星期的开始。）          | 三   |
  |      | 第一个星期天之前的所有天数都放在第0周。                      |      |
  +------+--------------------------------------------------------------+------+
  | %w   | 一个星期中的第几天（0 - 6，0是星期天）                       | 三   |
  +------+--------------------------------------------------------------+------+
  | %W   | 和%U基本相同，不同的是%W以星期一为一个星期的开始。           |      |
  +------+--------------------------------------------------------------+------+
  | %x   | 本地相应日期                                                 |      |
  +------+--------------------------------------------------------------+------+
  | %X   | 本地相应时间                                                 |      |
  +------+--------------------------------------------------------------+------+
  | %y   | 去掉世纪的年份（00 - 99）                                    |      |
  +------+--------------------------------------------------------------+------+
  | %Y   | 完整的年份                                                   |      |
  +------+--------------------------------------------------------------+------+
  | %Z   | 时区的名字（如果不存在为空字符）                             |      |
  +------+--------------------------------------------------------------+------+
  | %%   | ‘%’字符                                                      |      |
  +------+--------------------------------------------------------------+------+

**备注**：

- “%p”只有与“%I”配合使用才有效果。
- 文档中强调确实是0 - 61，而不是59，闰年秒占两秒（汗一个）。
-  当使用strptime()函数时，只有当在这年中的周数和天数被确定的时候%U和%W才会被计算。

例::

  >>> time.strftime("%Y-%m-%d %X", time.localtime())
  '2011-05-05 16:37:06'

time.strptime
------------------

.. function:: time.strptime(string[, format])

  把一个格式化时间字符串转化为struct_time。实际上它和strftime()是逆操作::

    >>> time.strptime('2011-05-05 16:37:06', '%Y-%m-%d %X')
    time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=16, tm_min=37, tm_sec=6, tm_wday=3, tm_yday=125, tm_isdst=-1)


  在这个函数中，format默认为: **"%a %b %d %H:%M:%S %Y"** .

其他
==================

今天看文档有一个 time.perf_counter(), 与time.time() 的区别的就是它与系统时间无关, 且
精度最高

