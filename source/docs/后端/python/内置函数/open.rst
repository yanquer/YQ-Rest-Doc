====================
open
====================


.. post:: 2023-02-20 22:06:49
  :tags: python, 内置函数
  :category: 后端
  :author: YanQue
  :location: CD
  :language: zh-cn


python open() 函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。

.. function:: open(name[, mode[, buffering]])

  name:
    一个包含了你要访问的文件名称的字符串值。
  mode:
    mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。
  buffering:
    如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。
    如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。
  newline: str = None
    指定换行符转换模式, 只对文本文件有效.

    默认值为None。该参数在文本模式下使用，可以控制读取或写入文本文件时处理换行符的方式。

    具体而言，当newline参数为None时，将根据操作系统来自动处理换行符。
    在Windows操作系统上，文本文件的换行符通常是\r\n，而在Unix/Linux操作系统上，则通常是\n。
    当newline参数为None时，在Windows上读取文件时，\r\n会被自动转换为\n，在Unix/Linux上读取文件时，\n则不做任何转换。

    另一方面，当newline参数设置为其他字符串值（例如""或"\n"）时，它将指定换行符的显式表示，并且不进行任何自动转换。
    例如，如果您想要强制使用Unix风格的换行符，则可以将newline参数设置为"\n"，这样无论在哪个操作系统下打开文件，都将始终使用\n作为换行符。

    有以下几种可选值：

    - None：表示使用系统默认的换行符。在Windows上是\r\n，在Unix/Linux/macOS上是\n。
    - ""（空字符串）：表示不将任何字符解释为换行符。
    - "\n"：表示只将\n视为有效换行符。这相当于Unix/Linux/macOS上的默认行为。
    - "\r"：表示只将\r视为有效换行符。这是非常罕见的情况。
    - "\r\n"：表示将\r\n视为有效换行符。这相当于Windows上的默认行为。

    请注意，在新版本的Python中，newline参数也可以设置为其他自定义字符串，但这些字符串必须要能够被正确地解释为换行符。

    当打开一个文本文件时，如果newline参数不是None，那么读取和写入操作将会根据指定的换行符进行处理。
    例如，如果newline参数设置为"\n"，
    则在读取文件时，所有\r\n序列都将被视为单个换行符\n，
    而在写入文件时，所有\n都将被转换为\r\n序列。

不同模式打开文件的完全列表：

.. csv-table::
  :header: 模式, 描述

  t,	  文本模式 (默认)。
  x,	  写模式，新建一个文件，如果该文件已存在则会报错。
  b,	  二进制模式。
  +,  	打开一个文件进行更新(可读可写)。
  U,	  通用换行模式（不推荐）。
  r,	  以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
  rb,	  以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。
  r+,	  打开一个文件用于读写。文件指针将会放在文件的开头。
  rb+,	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。
  w,  	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
  wb, 	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
  w+, 	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
  wb+,	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
  a,  	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
  ab, 	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
  a+, 	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
  ab+, 	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。
  x,    文件不存在才能写入

file 对象方法
====================

.. function:: file.read([size])

    size 未指定则返回整个文件，如果文件大小 >2 倍内存则有问题，f.read()读到文件尾时返回""(空字串)。

.. function:: file.readline()

    返回一行。

.. function:: file.readlines([size])

    返回包含size行的列表, size 未指定则返回全部行。

.. function:: for line in f: print line

    通过迭代器访问。

.. function:: f.write("hello\n")

    如果要写入字符串以外的数据,先将他转换为字符串。

.. function:: f.tell()

    返回一个整数,表示当前文件指针的位置(就是到文件头的字节数)。

.. function:: f.seek(偏移量,[起始位置])：

  用来移动文件指针

  偏移量: 单位为字节，可正可负

  起始位置: 0 - 文件头, 默认值; 1 - 当前位置; 2 - 文件尾

.. function:: f.close()

  关闭文件

.. function:: f.readinto(buffer)

  将文件读取到预先分配的缓冲中

  返回值为读取的字节数


实例
====================

测试文件 test.txt，内容如下::

  RUNOOB1
  RUNOOB2

  >>>f = open('test.txt')
  >>> f.read()

  'RUNOOB1\nRUNOOB2\n'



