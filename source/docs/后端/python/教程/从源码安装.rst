============================
从源码安装Python
============================


.. post:: 2023-02-20 22:06:49
  :tags: python, 教程
  :category: 后端
  :author: YanQue
  :location: CD
  :language: zh-cn


主要是针对发布版本的Linux吧, 比如Ubuntu, 使用::

  apt install python3

会发现安装的是跟当前对应的版本, 比如20就是Python3.8.

要安装其他版本的Python就只有源码安装了, `官网源码下载 <https://www.python.org/downloads/source/>`

如果看其他平台适用: https://www.python.org/downloads/

源码安装一般分3步:

- 配置 configure
- 编译 make
- 安装 make install

可参考官网开发手册: `Linux构建安装Python <https://devguide.python.org/getting-started/setup-building/index.html#linux>`_

前置依赖准备::

  sudo apt install build-essential gdb lcov pkg-config \
        libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \
        libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
        lzma lzma-dev tk-dev uuid-dev zlib1g-dev python-dev

.. note::

  官网并没提到要安装python-dev, 实际如果缺失会导致使用struct模块报错找不到_struct

创建安装目录, 创建/usr/local/python37作为安装目录 ::

  mkdir /usr/local/python37

配置::

  ./configure --prefix=/usr/local/python37 --with-pydebug --enable-optimizations

- --prefix=/opt/python3.9用来指定安装位置
- --with-pydebug添加调试工具用
- --enable-optimizations对编译结果进行优化，提高运行效率，但会增加编译时间

编译::

  make

可以使用 -j 参数指定CPU个数进行并行编译

检查编译::

  make test

安装::

  sudo make altinstall

也可使用install，代价是它可能会更改自带的python3安装，使得卸载变得困难，甚至使自带的python3变得不可用


**总结, 所有指令**::

  sudo apt install build-essential gdb lcov pkg-config \
        libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \
        libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
        lzma lzma-dev tk-dev uuid-dev zlib1g-dev
  sudo mkdir /usr/local/python37
  ./configure --prefix=/usr/local/python37 --with-pydebug --enable-optimizations
  make -j 3
  sudo make altinstall

.. sidebar::

  使用源码安装最麻烦的是依赖包处理. 比如Ubuntu20, 官方源的Python绑定是3.8的版本. 如果
  想要安装Python3.7, 那么你会发现至少缺少Python3.7-dev, 且源里面没有也下载不了.

  注:

  python-dev or python-devel 称为 Python 的开发包，包括了一些用 C / Java / C# 等编写的 Python 扩展，
  在编译的时候依赖的头文件等信息。在编译一个用 C 语言编写的 Python 扩展模块时，
  里面会有 #include<Python.h> 这样的语句，因此需要先安装 python-dev or python-devel 开发包.

  这种情况下要么换个有此包的源然后下载, 但是可能也会有其他依赖包版本问题, 要换直接去支持版本的机器上
  全量编一个.

  - Ubuntu 下名称 python-dev and python3-dev
  - CentOS 下名称 python-devel and python3-devel

关于动态库链接处理
============================

当时候从其他机器编译的Python时, 若需要的动态库在本机不存在, 还需要处理
动态库链接, 有几种方式(任选其一):

- 将so文件所在目录如 `/usr/local/lib` 添加到 `/etc/ld.so.conf` 并运行ldconfig.
  当然，这是系统范围的设置.
- 将动态链接库文件(.so文件)复制到/usr/local/lib 或 /usr/lib,
  然后执行 ``sudo ldconfig`` 更新系统动态链接库缓存.
- 将共享库放在统一的位置如 path/to/libs,
  然后将其加入环境变量::

    export LD_LIBRARY_PATH=path/to/libs:$LD_LIBRARY_PATH

  如果要永久生效就需要加到如 /etc/profile

.. sidebar::

  打印 LD_LIBRARY_PATH 的值, 会发现 `/usr/local/lib` 或 `/usr/lib` 并不在这个
  变量中, 这是因为, 这两目录是默认的共享库搜索路径.
  即使未将该目录添加到 LD_LIBRARY_PATH 环境变量中，操作系统也会自动搜索该目录以查找所需的共享库

.. warning::

  对于Ubuntu等, `/usr/bin/python` 是与其他指令息息相关的, 比如 pip, lsb-release 等.
  所以若自定义源码安装的版本与自带版本不一致时, 最好还是采用设置环境变量来处理执行命令的问题,
  而不是直接修改 `/usr/bin/python` 的链接地址.

