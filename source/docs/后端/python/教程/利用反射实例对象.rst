=========================
Python利用反射实例对象
=========================


.. post:: 2023-02-20 22:08:48
  :tags: python, 教程
  :category: 后端
  :author: YanQue
  :location: CD
  :language: zh-cn


如果不局限于使用反射, 可以考虑使用 eval 函数, 此函数会将传入的字符串当作Python代码执行.

反射
=========================

反射(reflection)是一个编程语言的能力,允许程序在运行时检查和修改它自己的结构和行为。
如让程序在运行时发现和修改它自身的属性、方法的结构和动态地创建和执行。

反射主要具有以下几个功能:

- 自我检查:程序可以在运行时检查自身的结构,获取类、方法、属性的信息。
- 自我修改:程序在运行时可以修改自身的结构,添加、删除或者修改类、方法、属性。
- 动态加载:可以在运行时加载外部类和编译好的代码。
- 避免硬编码:通过反射可以避免将字符串、类名等硬编码在程序中。

通常,反射用于以下几个方面:

- 框架设计:通过反射实现动态加载类,避免硬编码类名,增强灵活性。
- 动态代理:通常使用反射生成代理类和代理方法。
- ORM框架:通过反射读取类的属性与数据库字段对应。
- IoC容器:通过反射动态实例化类,实现依赖注入。
- 动态编译器:通过反射生成动态类和方法。

使用importlib
=========================

见: :doc:`/docs/后端/python/python标准库/importlib`

如有一个model.py内容如下::

  class Person:
    def __init__(self, name):
      self.name = name

在main.py调用::

  import importlib

  module = importlib.import_module('module')
  c = getattr(module, 'Person')
  p = c('Jack')
  print(p.name)  # Jack

