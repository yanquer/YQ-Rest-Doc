================================
tcpdump
================================

一款sniffer工具，是Linux上的抓包工具，嗅探器
文字接口的封包抓取

一个功能强大的命令行数据包分析器，它是通过监听服务器的网卡来获取数据包，
所有通过网络访问的数据包都能获取到。
它也提供了过滤器的功能，可以获取指定的网络、端口或协议的数据包

选项
================================

-a
  尝试将网络和广播地址转换成名称；
-c<count>
  count表示数据包数目. 抓取数据包的数量达到count后结束命令，如果不使用-c 参数，会不停的抓取数据包，直到手动停止
-C<file_size>
  抓取数据包保存到文件时，通过该命令指定文件的大小。
  文件达到指定大小后，会创建一个在原文件名称后面加上序号的新文件，如：dump.txt，dump.txt1。
  file_size的单位是b
-d
  把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；
-dd
  把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；
-ddd
  把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；
-D
  列出服务器所有网卡。
  tcpdump默认监听的是编号最小的那个网卡，一般是eth0。
  在进行抓包时可以通过 -i 参数指定监听的网卡，any表示监听所有网卡
-e
  在每列倾倒资料上显示连接层级的文件头；
-f
  用数字显示网际网络地址；
-F<表达文件>
  指定内含表达方式的文件；
-i<interface>
  指定监听的网卡名称，any表示监听所有的网卡; 如eth0；
-l
  使用标准输出列的缓冲区；
-n
  输出结果中，不把ip转换成主机名（默认显示的是主机名）
-N
  不列出域名；
-O
  不将数据包编码最佳化；
-p
  不让网络界面进入混杂模式；
-q
  快速输出，仅列出少数的传输协议信息(简要的数据包信息)
-r<file>
  从指定的文件读取数据包数据, 不再从网络获取数据包
-w<file>
  将抓取的数据包保存到文件，-r 参数可以从文件中读取数据包
-W<filecount>
  指定文件的数量，当文件滚动到指定数量后会从第一个文件开始覆盖
-s<数据包大小>
  设置每个数据包的大小；
-S
  用绝对而非相对数值列出TCP关联数；
-t
  不输出时间戳
-tt
  在每列倾倒资料上显示未经格式化的时间戳记；
-T<数据包类型>
  强制将表达方式所指定的数据包转译成设置的数据包类型；
-v
  详细显示指令执行过程；
-vv
  更详细显示指令执行过程；
-x
  用十六进制字码列出数据包资料；
-w<数据包文件>
  把数据包数据写入指定的文件。

除了以上参数，还有一些关键字可以用来进行条件过滤，常用关键字如下:

host
  过滤主机，如 tcpdump host 192.168.1.110 只抓取经过这个ip的数据包
src
  用来过滤请求来源方的参数，如：tcpdump src host 192.168.1.110, 只抓取从这个ip过来的数据包
dst
  用来过滤请求接收方的参数，如：tcpdump dst host 192.168.1.110, 只抓取发送到这个ip的数据包
port
  过滤端口，如：tcpdump port 8080, 只抓取经过8080端口的数据包
net
  过滤网络，如：tcpdump net 192.168, 只抓取经过这个网段的数据包
and, not, or
  条件过滤，和字面意思一样。如：tcpdump net 192.168 and port 8080 抓取经过192.168网段并经过8080端口的数据包

数据包分析
================================

抓取的数据包格式如下::

  $ sudo tcpdump -i any port 443
  tcpdump: data link type PKTAP
  tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
  listening on any, link-type PKTAP (Apple DLT_PKTAP), snapshot length 524288 bytes

  18:23:05.458511 IP6 240e:399:299:b5e0:91fd:8c93:e300:58e0.63539 > 240e:d9:a600:834::15.https: Flags [.], ack 2868012794, win 4096, length 0
  18:23:05.463866 IP6 240e:d9:a600:834::15.https > 240e:399:299:b5e0:91fd:8c93:e300:58e0.63539: Flags [.], ack 1, win 285, length 0
  18:23:07.904922 IP 49.7.149.118.https > 192.168.101.4.61893: Flags [P.], seq 3360794318:3360794350, ack 4281540851, win 65, length 32
  18:23:07.905058 IP 192.168.101.4.61893 > 49.7.149.118.https: Flags [.], ack 32, win 4096, length 0

详细数据对应为::

  18:23:07.905058 IP 192.168.101.4.61893 > 49.7.149.118.https: Flags [.], ack 32, win 4096, length 0

  时间戳          IP请求发送方的ip和端口 > 请求接收方的ip和端口         ack-包类型        length-报文体的长度
                                                            Flags-标识和状态   win-表示当前窗口的可用大小

时间戳
  时:分:秒.微秒
IP
  网际网络协议的名称
请求发送方的ip和端口 > 请求接收方的ip和端口
  端口有时会显示为某个网络协议，如http、ssh、mysql等*
Flags [R]
  flag标识和状态，可选的状态有::

    [S.] [.] [P.] [F.][R]
seq、ack、fin
  表示tcp协议的3次握手和4次挥手的过程。
  seq表示请求的序列号，ack是回答的序列号，fin表示完成。
  这里显示的序列号是相对值，-S参数可以显示绝对值
win
  表示当前窗口的可用大小
length
  报文体的长度，从长度可以简单分析是否正确接收了请求

通过以上结果只能做简单的分析，可以使用 `-w` 参数把数据包写入文件，
文件中记录的数据包比命令行要详细的多。
借助分析工具可以对文件进一步分析，
这里推荐使用Wireshark，这个工具是开源的，开箱即用使用简单，这里不做详细介绍了

常用的命令组合
================================

抓取8080端口的数据包::

  tcpdump -i any port 8080

抓取从192.168.1.110发送到192.168.1.111的数据包::

  tcpdump -i any src host 192.168.1.110 and dst host 192.168.1.111

抓取192.168网段除了192.168.1.110的请求的数据包::

  tcpdump -i any src net 192.168 and 'src host not 192.168.1.110'

抓取8080端口的数据包并写入dump.log文件中::

  tcpdump -i any port 8080 -w dump.log

注意事项
================================

- tcpdump需要用管理员权限运行，可以用sudo命令或者root用户
- 抓取的数据包通过length字段只能做一些简单的判断，想要详细分析，需要借助数据包分析工具，如：Wireshark


