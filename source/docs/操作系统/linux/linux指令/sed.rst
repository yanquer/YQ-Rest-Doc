====================
sed
====================

流式文本编辑器

利用脚本来处理文本文件。

sed 可依照脚本的指令来处理、编辑文本文件。

Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。

语法::

    sed [-hnV][-e<script>][-f<script文件>][文本文件]

选项参数
====================

-n, --quiet, --silent
                  仅显示处理后的结果
-e<script>, --expression=<script>
                  指定sed编辑命令. 以选项中指定的script来处理输入的文本文件
-i                直接修改读取的文件内容，而不是输出到终端。
-f<script>, --file=<script>
                  以选项中指定的script文件来处理输入的文本文件.
                  直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；
-r                sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
-h, --help        显示帮助。
-V, --version     显示版本信息

文本操作方式
====================

流式文本编辑器::

    a\  # 在当前行下面插入文本。
    i\  # 在当前行上面插入文本。
    c\  # 把选定的行改为新的文本。
    d   # 删除，删除选择的行。
    D   # 删除模板块的第一行。
    s   # 替换指定字符. 通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g
    h   # 拷贝模板块的内容到内存中的缓冲区。
    H   # 追加模板块的内容到内存中的缓冲区。
    g   # 获得内存缓冲区的内容，并替代当前模板块中的文本。 表示行内全面替换。
    G   # 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
    l   # 列表不能打印字符的清单。
    n   # 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
    N   # 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
    p   # 打印模板块的行。通常 p 会与参数 sed -n 一起运行
    P   # (大写) 打印模板块的第一行。
    q   # 退出Sed。

    b lable     # 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
    r file      # 从file中读行。
    t label     # if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
    T label     # 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
    w file      # 写并追加模板块到file末尾。 表示把行写入一个文件。
    W file      # 写并追加模板块的第一行到file末尾。

    !   # 表示后面的命令对所有没有被选定的行发生作用。
    =   # 打印当前行号码。
    #   # 把注释扩展到下一个换行符以前。
    x   # 表示互换模板块中的文本和缓冲区中的文本。
    y   # 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
    \1  # 子串匹配标记
    &   # 已匹配字符串标记
    $   # 可表示最后一行, 支持用 $-1 来表示倒数第二行等...

.. tip::

    可以sed加文件名::

        sed ":a;N;s/\n//g;ta" a.txt

    sed是按行处理文本数据的，每次处理一行数据后，都会在行尾自动添加trailing newline，其实就是行的分隔符即换行符。

sed元字符集::

    ^       # 匹配行开始，如：/^sed/匹配所有以sed开头的行。
    $       # 匹配行结束，如：/sed$/匹配所有以sed结尾的行。
    .       # 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。
    *       # 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。
    []      # 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。
    [^]     # 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。
    \(..\)  # 匹配子串，保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。
    &       # 保存搜索字符用来替换其他字符，如s/love/ **&** /，love这成 **love** 。
    \<      # 匹配单词的开始，如:/\<love/匹配包含以love开头的单词的行。
    \>      # 匹配单词的结束，如/love\>/匹配包含以love结尾的单词的行。

    x\{m\}      # 重复字符x，m次，如：/0\{5\}/匹配包含5个0的行。
    x\{m,\}     # 重复字符x，至少m次，如：/0\{5,\}/匹配至少有5个0的行。
    x\{m,n\}    # 重复字符x，至少m次，不多于n次，如：/0\{5,10\}/匹配5~10个0的行。

sed替换标记::

    g # 表示行内全面替换。
    p # 表示打印行。
    w # 表示把行写入一个文件。
    x # 表示互换模板块中的文本和缓冲区中的文本。
    y # 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
    \1 # 子串匹配标记
    & # 已匹配字符串标记

例
====================

删除“234”的行（整行删除）::

    echo -e "123\n234\n342\n" | sed '/^234$/d'

删除第二行::

    echo -e "123\n234\n342\n" | sed 2d

替换空格::

    echo -e "123\n12\n23" | sed ":a;N;s/\n//g;ta"
    # tr "\n" "" 就好了
    # N是把下一行加入到当前的hold space模式空间里，使之进行后续处理，最后sed会默认打印hold space模式空间里的内容。也就是说，sed是可以处理多行数据的。
    # :a和ta是配套使用，实现跳转功能。t是test测试的意思。
    # 另外，还有:a和ba的配套使用方式，也可以实现跳转功能。b是branch分支的意思。


打印4-10行::

    sed -n '4,10p' file

仅匹配字符串::

    echo "abcde" | sed 's/a\(.*\)e/\1/g'
    # bcd      (结果)
    # \(...\) 表示仅匹配子串
    # \1    表示子串


已匹配结果::

    echo 'qwer' | sed 's/\w\+/"&"/g'
    # "qwer"

替换单引号 原因暂时没有查到，只找到说加$可以转义bash::

    sed $'s/\'//g'

.. note::

    sed后面可以不用三个斜杠，只要是三个相同的字符就行，这一点就比较神奇。

打印文件以hhh开始的所有行::

    sed -n '/hhh/,\$p' $file

删除空行::

    sed '/^\s*$/d' $file

在第一行插入一行qwe(Mac的sed不支持使用i)::

    echo 123 | sed '1 i\qwe'

