=========================
xargs
=========================

**xargs 命令** 是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。
它擅长将标准输入数据转换成命令行参数，xargs 能够处理管道或者 stdin 并将其转换成特定命令的命令参数。
xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。
xargs 的默认命令是 echo，空格是默认定界符。
这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。
xargs 是构建单行命令的重要组件之一。

xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。

- xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。
- xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。
- xargs 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。
- xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。

之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，
而日常工作中有有这个必要，所以就有了 xargs 命令，例如::

  find /sbin -perm +700 |ls -l          # 这个命令是错误的
  find /sbin -perm +700 |xargs ls -l    # 这样才是正确的

参数选项
=========================

-n<num>         指定每行num个输出，默认是无限制
-d<xxx>         以xxx为分隔符
-a<file>        从文件中读入作为stdin
-e<flag>        注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。
-p              当每次执行一个argument的时候询问一次用户(询问时, 必须手动输入y, 才会执行)
-t              表示先打印命令，然后再执行。
-i, -I          得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。
-r              no-run-if-empty, 当xargs的输入为空的时候则停止xargs，不用再去执行了。
-s<num>         命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。
-l              将输入分段，一次执行一行，这样可以避免参数列表过长而导致命令行过长的问题
-L<num>         从标准输入一次读取 num 行送给 command 命令。
-x              exit的意思，主要是配合-s使用。
-P              修改最大的进程数，默认是1，为0时候为as many as it can ，这个例子我没有想到，应该平时都用不到的吧

xargs 结合 find 使用

用 rm 删除太多的文件时候，可能得到一个错误信息: **/bin/rm Argument list too long.**
用 xargs 去避免这个问题::

  find . -type f -name "*.log" -print0 | xargs -0 rm -f

xargs -0 将 ``\0`` 作为定界符。

用例, 找apk包并复制到文件夹apks::

  find ./ -name "*.apk" 2>/dev/null | xargs -t -I "{}" cp "{}" apks

再比如MacOS下查找当前目录的rst文档名::

  ls *.rst | xargs -L1  | cut -d. -f 1




