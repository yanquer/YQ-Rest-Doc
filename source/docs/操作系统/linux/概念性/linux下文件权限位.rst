==============================
linux下文件权限
==============================

ls -l查看文件格式一共有10位::

	9 8 7 6 5 4 3 2 1 0
	- r w x r - x r - x

其中,

- 第9位, 表示文件类型, 支持的类型见 文件类型_
- 8-6位, 表示文件所有者权限, 支持权限见 文件权限_
- 5-3位, 表示文件所属组权限
- 2-0位, 表示其他用户权限

.. _文件权限:

文件权限
==============================

常用权限
-----------------------------

以常用权限来说, 权限可分: 读、写、执行, 分别以 r、w、x表示::

	r, 可读, 可以读出文件的内容
	w, 可写, 可以修改文件的内容
	x, 可执行, 可运行文件

所有权限
-----------------------------

在unix下，文件权限用12个二进制位表示::

	11 10 9 8 7 6 5 4 3 2 1 0
	S  G T r w x r w x r w x

- 第11位, 为SUID位
- 第10位, 为SGID位
- 第9位为, sticky位

文件权限的s位和t位的理解
-----------------------------

这里涉及到了Effective UID和Real UID以及Saved UID:

- Effective UID: 程序实际操作时生效的UID (简称euid)
- Real UID: 执行该程序的用户的实际UID (简称ruid)
- Saved UID: 在高权限用户降权后，保留的其原本UID (简称suid)

增加了一个s权限，使该程序在实际运行时Effective UID就会变为0，即root(当文件属主位root时)的UID

创建s和t权限，是为了让一般用户在执行某些程序时，能够暂时拥有改程序拥有者的权限（体现在x位）。 从这一点来说, 该文件必具有x属性

- SUID是Set User  Id

  - 仅对二进制文件（binary）有效（也就是说对于shell脚本或者目录无效）
  - 执行者需要有x权限
  - 仅在执行该权限的过程中有效
  - 执行者将具有该权限拥有者的权限

- SGID是Set Group Id

  - 对二进制文件有效（与suid不同的是，可以作用于目录）
  - 执行者需要有x权限
  - 执行者在执行过程中会获得该程序群组的支持

ls -l查看文件格式一共有10位::

  9 8 7 6 5 4 3 2 1 0
  - r w x r - x r - x

  # 这10位中8-6位是文件所有者权限
  # 5-3位是同组用户权限
  # 2-0位其他用户权限
  # 形式为rwx

r
  表示可读，可以读出文件的内容
w
  表示可写，可以修改文件的内容
x
  表示可执行，可运行文件

第9位表示文件类型::

  p表示命名管道文件
  d表示目录文件
  l表示符号链接文件
  -表示普通文件
  s表示socket文件
  c表示字符设备文件
  b表示块设备文件

其实在unix下，文件权限用12个二进制位表示::

  11 10 9 8 7 6 5 4 3 2 1 0
  S  G T r w x r w x r w x

  # 第11位为SUID位
  # 第10位为SGID位
  # 第9位为sticky位

.. _文件类型:

文件类型
==============================

- p: 命名管道文件
- d: 目录文件
- l: 符号链接文件
- -: 表示普通文件
- s: socket文件
- c: 字符设备文件
- b: 块设备文件


